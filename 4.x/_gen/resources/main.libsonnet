local d = (import 'github.com/jsonnet-libs/docsonnet/doc-util/main.libsonnet');
{
  '#':: d.pkg(name='resource', url='', help=''),
  accessanalyzer_analyzer: (import 'accessanalyzer_analyzer.libsonnet'),
  accessanalyzer_archive_rule: (import 'accessanalyzer_archive_rule.libsonnet'),
  account_alternate_contact: (import 'account_alternate_contact.libsonnet'),
  acm_certificate: (import 'acm_certificate.libsonnet'),
  acm_certificate_validation: (import 'acm_certificate_validation.libsonnet'),
  acmpca_certificate: (import 'acmpca_certificate.libsonnet'),
  acmpca_certificate_authority: (import 'acmpca_certificate_authority.libsonnet'),
  acmpca_certificate_authority_certificate: (import 'acmpca_certificate_authority_certificate.libsonnet'),
  acmpca_permission: (import 'acmpca_permission.libsonnet'),
  acmpca_policy: (import 'acmpca_policy.libsonnet'),
  alb: (import 'alb.libsonnet'),
  alb_listener: (import 'alb_listener.libsonnet'),
  alb_listener_certificate: (import 'alb_listener_certificate.libsonnet'),
  alb_listener_rule: (import 'alb_listener_rule.libsonnet'),
  alb_target_group: (import 'alb_target_group.libsonnet'),
  alb_target_group_attachment: (import 'alb_target_group_attachment.libsonnet'),
  ami: (import 'ami.libsonnet'),
  ami_copy: (import 'ami_copy.libsonnet'),
  ami_from_instance: (import 'ami_from_instance.libsonnet'),
  ami_launch_permission: (import 'ami_launch_permission.libsonnet'),
  amplify_app: (import 'amplify_app.libsonnet'),
  amplify_backend_environment: (import 'amplify_backend_environment.libsonnet'),
  amplify_branch: (import 'amplify_branch.libsonnet'),
  amplify_domain_association: (import 'amplify_domain_association.libsonnet'),
  amplify_webhook: (import 'amplify_webhook.libsonnet'),
  api_gateway_account: (import 'api_gateway_account.libsonnet'),
  api_gateway_api_key: (import 'api_gateway_api_key.libsonnet'),
  api_gateway_authorizer: (import 'api_gateway_authorizer.libsonnet'),
  api_gateway_base_path_mapping: (import 'api_gateway_base_path_mapping.libsonnet'),
  api_gateway_client_certificate: (import 'api_gateway_client_certificate.libsonnet'),
  api_gateway_deployment: (import 'api_gateway_deployment.libsonnet'),
  api_gateway_documentation_part: (import 'api_gateway_documentation_part.libsonnet'),
  api_gateway_documentation_version: (import 'api_gateway_documentation_version.libsonnet'),
  api_gateway_domain_name: (import 'api_gateway_domain_name.libsonnet'),
  api_gateway_gateway_response: (import 'api_gateway_gateway_response.libsonnet'),
  api_gateway_integration: (import 'api_gateway_integration.libsonnet'),
  api_gateway_integration_response: (import 'api_gateway_integration_response.libsonnet'),
  api_gateway_method: (import 'api_gateway_method.libsonnet'),
  api_gateway_method_response: (import 'api_gateway_method_response.libsonnet'),
  api_gateway_method_settings: (import 'api_gateway_method_settings.libsonnet'),
  api_gateway_model: (import 'api_gateway_model.libsonnet'),
  api_gateway_request_validator: (import 'api_gateway_request_validator.libsonnet'),
  api_gateway_resource: (import 'api_gateway_resource.libsonnet'),
  api_gateway_rest_api: (import 'api_gateway_rest_api.libsonnet'),
  api_gateway_rest_api_policy: (import 'api_gateway_rest_api_policy.libsonnet'),
  api_gateway_stage: (import 'api_gateway_stage.libsonnet'),
  api_gateway_usage_plan: (import 'api_gateway_usage_plan.libsonnet'),
  api_gateway_usage_plan_key: (import 'api_gateway_usage_plan_key.libsonnet'),
  api_gateway_vpc_link: (import 'api_gateway_vpc_link.libsonnet'),
  apigatewayv2_api: (import 'apigatewayv2_api.libsonnet'),
  apigatewayv2_api_mapping: (import 'apigatewayv2_api_mapping.libsonnet'),
  apigatewayv2_authorizer: (import 'apigatewayv2_authorizer.libsonnet'),
  apigatewayv2_deployment: (import 'apigatewayv2_deployment.libsonnet'),
  apigatewayv2_domain_name: (import 'apigatewayv2_domain_name.libsonnet'),
  apigatewayv2_integration: (import 'apigatewayv2_integration.libsonnet'),
  apigatewayv2_integration_response: (import 'apigatewayv2_integration_response.libsonnet'),
  apigatewayv2_model: (import 'apigatewayv2_model.libsonnet'),
  apigatewayv2_route: (import 'apigatewayv2_route.libsonnet'),
  apigatewayv2_route_response: (import 'apigatewayv2_route_response.libsonnet'),
  apigatewayv2_stage: (import 'apigatewayv2_stage.libsonnet'),
  apigatewayv2_vpc_link: (import 'apigatewayv2_vpc_link.libsonnet'),
  app_cookie_stickiness_policy: (import 'app_cookie_stickiness_policy.libsonnet'),
  appautoscaling_policy: (import 'appautoscaling_policy.libsonnet'),
  appautoscaling_scheduled_action: (import 'appautoscaling_scheduled_action.libsonnet'),
  appautoscaling_target: (import 'appautoscaling_target.libsonnet'),
  appconfig_application: (import 'appconfig_application.libsonnet'),
  appconfig_configuration_profile: (import 'appconfig_configuration_profile.libsonnet'),
  appconfig_deployment: (import 'appconfig_deployment.libsonnet'),
  appconfig_deployment_strategy: (import 'appconfig_deployment_strategy.libsonnet'),
  appconfig_environment: (import 'appconfig_environment.libsonnet'),
  appconfig_extension: (import 'appconfig_extension.libsonnet'),
  appconfig_extension_association: (import 'appconfig_extension_association.libsonnet'),
  appconfig_hosted_configuration_version: (import 'appconfig_hosted_configuration_version.libsonnet'),
  appflow_connector_profile: (import 'appflow_connector_profile.libsonnet'),
  appflow_flow: (import 'appflow_flow.libsonnet'),
  appintegrations_event_integration: (import 'appintegrations_event_integration.libsonnet'),
  applicationinsights_application: (import 'applicationinsights_application.libsonnet'),
  appmesh_gateway_route: (import 'appmesh_gateway_route.libsonnet'),
  appmesh_mesh: (import 'appmesh_mesh.libsonnet'),
  appmesh_route: (import 'appmesh_route.libsonnet'),
  appmesh_virtual_gateway: (import 'appmesh_virtual_gateway.libsonnet'),
  appmesh_virtual_node: (import 'appmesh_virtual_node.libsonnet'),
  appmesh_virtual_router: (import 'appmesh_virtual_router.libsonnet'),
  appmesh_virtual_service: (import 'appmesh_virtual_service.libsonnet'),
  apprunner_auto_scaling_configuration_version: (import 'apprunner_auto_scaling_configuration_version.libsonnet'),
  apprunner_connection: (import 'apprunner_connection.libsonnet'),
  apprunner_custom_domain_association: (import 'apprunner_custom_domain_association.libsonnet'),
  apprunner_observability_configuration: (import 'apprunner_observability_configuration.libsonnet'),
  apprunner_service: (import 'apprunner_service.libsonnet'),
  apprunner_vpc_connector: (import 'apprunner_vpc_connector.libsonnet'),
  apprunner_vpc_ingress_connection: (import 'apprunner_vpc_ingress_connection.libsonnet'),
  appstream_directory_config: (import 'appstream_directory_config.libsonnet'),
  appstream_fleet: (import 'appstream_fleet.libsonnet'),
  appstream_fleet_stack_association: (import 'appstream_fleet_stack_association.libsonnet'),
  appstream_image_builder: (import 'appstream_image_builder.libsonnet'),
  appstream_stack: (import 'appstream_stack.libsonnet'),
  appstream_user: (import 'appstream_user.libsonnet'),
  appstream_user_stack_association: (import 'appstream_user_stack_association.libsonnet'),
  appsync_api_cache: (import 'appsync_api_cache.libsonnet'),
  appsync_api_key: (import 'appsync_api_key.libsonnet'),
  appsync_datasource: (import 'appsync_datasource.libsonnet'),
  appsync_domain_name: (import 'appsync_domain_name.libsonnet'),
  appsync_domain_name_api_association: (import 'appsync_domain_name_api_association.libsonnet'),
  appsync_function: (import 'appsync_function.libsonnet'),
  appsync_graphql_api: (import 'appsync_graphql_api.libsonnet'),
  appsync_resolver: (import 'appsync_resolver.libsonnet'),
  athena_data_catalog: (import 'athena_data_catalog.libsonnet'),
  athena_database: (import 'athena_database.libsonnet'),
  athena_named_query: (import 'athena_named_query.libsonnet'),
  athena_workgroup: (import 'athena_workgroup.libsonnet'),
  auditmanager_account_registration: (import 'auditmanager_account_registration.libsonnet'),
  auditmanager_control: (import 'auditmanager_control.libsonnet'),
  auditmanager_framework: (import 'auditmanager_framework.libsonnet'),
  autoscaling_attachment: (import 'autoscaling_attachment.libsonnet'),
  autoscaling_group: (import 'autoscaling_group.libsonnet'),
  autoscaling_group_tag: (import 'autoscaling_group_tag.libsonnet'),
  autoscaling_lifecycle_hook: (import 'autoscaling_lifecycle_hook.libsonnet'),
  autoscaling_notification: (import 'autoscaling_notification.libsonnet'),
  autoscaling_policy: (import 'autoscaling_policy.libsonnet'),
  autoscaling_schedule: (import 'autoscaling_schedule.libsonnet'),
  autoscalingplans_scaling_plan: (import 'autoscalingplans_scaling_plan.libsonnet'),
  backup_framework: (import 'backup_framework.libsonnet'),
  backup_global_settings: (import 'backup_global_settings.libsonnet'),
  backup_plan: (import 'backup_plan.libsonnet'),
  backup_region_settings: (import 'backup_region_settings.libsonnet'),
  backup_report_plan: (import 'backup_report_plan.libsonnet'),
  backup_selection: (import 'backup_selection.libsonnet'),
  backup_vault: (import 'backup_vault.libsonnet'),
  backup_vault_lock_configuration: (import 'backup_vault_lock_configuration.libsonnet'),
  backup_vault_notifications: (import 'backup_vault_notifications.libsonnet'),
  backup_vault_policy: (import 'backup_vault_policy.libsonnet'),
  batch_compute_environment: (import 'batch_compute_environment.libsonnet'),
  batch_job_definition: (import 'batch_job_definition.libsonnet'),
  batch_job_queue: (import 'batch_job_queue.libsonnet'),
  batch_scheduling_policy: (import 'batch_scheduling_policy.libsonnet'),
  budgets_budget: (import 'budgets_budget.libsonnet'),
  budgets_budget_action: (import 'budgets_budget_action.libsonnet'),
  ce_anomaly_monitor: (import 'ce_anomaly_monitor.libsonnet'),
  ce_anomaly_subscription: (import 'ce_anomaly_subscription.libsonnet'),
  ce_cost_allocation_tag: (import 'ce_cost_allocation_tag.libsonnet'),
  ce_cost_category: (import 'ce_cost_category.libsonnet'),
  chime_voice_connector: (import 'chime_voice_connector.libsonnet'),
  chime_voice_connector_group: (import 'chime_voice_connector_group.libsonnet'),
  chime_voice_connector_logging: (import 'chime_voice_connector_logging.libsonnet'),
  chime_voice_connector_origination: (import 'chime_voice_connector_origination.libsonnet'),
  chime_voice_connector_streaming: (import 'chime_voice_connector_streaming.libsonnet'),
  chime_voice_connector_termination: (import 'chime_voice_connector_termination.libsonnet'),
  chime_voice_connector_termination_credentials: (import 'chime_voice_connector_termination_credentials.libsonnet'),
  cloud9_environment_ec2: (import 'cloud9_environment_ec2.libsonnet'),
  cloud9_environment_membership: (import 'cloud9_environment_membership.libsonnet'),
  cloudcontrolapi_resource: (import 'cloudcontrolapi_resource.libsonnet'),
  cloudformation_stack: (import 'cloudformation_stack.libsonnet'),
  cloudformation_stack_set: (import 'cloudformation_stack_set.libsonnet'),
  cloudformation_stack_set_instance: (import 'cloudformation_stack_set_instance.libsonnet'),
  cloudformation_type: (import 'cloudformation_type.libsonnet'),
  cloudfront_cache_policy: (import 'cloudfront_cache_policy.libsonnet'),
  cloudfront_distribution: (import 'cloudfront_distribution.libsonnet'),
  cloudfront_field_level_encryption_config: (import 'cloudfront_field_level_encryption_config.libsonnet'),
  cloudfront_field_level_encryption_profile: (import 'cloudfront_field_level_encryption_profile.libsonnet'),
  cloudfront_function: (import 'cloudfront_function.libsonnet'),
  cloudfront_key_group: (import 'cloudfront_key_group.libsonnet'),
  cloudfront_monitoring_subscription: (import 'cloudfront_monitoring_subscription.libsonnet'),
  cloudfront_origin_access_control: (import 'cloudfront_origin_access_control.libsonnet'),
  cloudfront_origin_access_identity: (import 'cloudfront_origin_access_identity.libsonnet'),
  cloudfront_origin_request_policy: (import 'cloudfront_origin_request_policy.libsonnet'),
  cloudfront_public_key: (import 'cloudfront_public_key.libsonnet'),
  cloudfront_realtime_log_config: (import 'cloudfront_realtime_log_config.libsonnet'),
  cloudfront_response_headers_policy: (import 'cloudfront_response_headers_policy.libsonnet'),
  cloudhsm_v2_cluster: (import 'cloudhsm_v2_cluster.libsonnet'),
  cloudhsm_v2_hsm: (import 'cloudhsm_v2_hsm.libsonnet'),
  cloudsearch_domain: (import 'cloudsearch_domain.libsonnet'),
  cloudsearch_domain_service_access_policy: (import 'cloudsearch_domain_service_access_policy.libsonnet'),
  cloudtrail: (import 'cloudtrail.libsonnet'),
  cloudtrail_event_data_store: (import 'cloudtrail_event_data_store.libsonnet'),
  cloudwatch_composite_alarm: (import 'cloudwatch_composite_alarm.libsonnet'),
  cloudwatch_dashboard: (import 'cloudwatch_dashboard.libsonnet'),
  cloudwatch_event_api_destination: (import 'cloudwatch_event_api_destination.libsonnet'),
  cloudwatch_event_archive: (import 'cloudwatch_event_archive.libsonnet'),
  cloudwatch_event_bus: (import 'cloudwatch_event_bus.libsonnet'),
  cloudwatch_event_bus_policy: (import 'cloudwatch_event_bus_policy.libsonnet'),
  cloudwatch_event_connection: (import 'cloudwatch_event_connection.libsonnet'),
  cloudwatch_event_permission: (import 'cloudwatch_event_permission.libsonnet'),
  cloudwatch_event_rule: (import 'cloudwatch_event_rule.libsonnet'),
  cloudwatch_event_target: (import 'cloudwatch_event_target.libsonnet'),
  cloudwatch_log_data_protection_policy: (import 'cloudwatch_log_data_protection_policy.libsonnet'),
  cloudwatch_log_destination: (import 'cloudwatch_log_destination.libsonnet'),
  cloudwatch_log_destination_policy: (import 'cloudwatch_log_destination_policy.libsonnet'),
  cloudwatch_log_group: (import 'cloudwatch_log_group.libsonnet'),
  cloudwatch_log_metric_filter: (import 'cloudwatch_log_metric_filter.libsonnet'),
  cloudwatch_log_resource_policy: (import 'cloudwatch_log_resource_policy.libsonnet'),
  cloudwatch_log_stream: (import 'cloudwatch_log_stream.libsonnet'),
  cloudwatch_log_subscription_filter: (import 'cloudwatch_log_subscription_filter.libsonnet'),
  cloudwatch_metric_alarm: (import 'cloudwatch_metric_alarm.libsonnet'),
  cloudwatch_metric_stream: (import 'cloudwatch_metric_stream.libsonnet'),
  cloudwatch_query_definition: (import 'cloudwatch_query_definition.libsonnet'),
  codeartifact_domain: (import 'codeartifact_domain.libsonnet'),
  codeartifact_domain_permissions_policy: (import 'codeartifact_domain_permissions_policy.libsonnet'),
  codeartifact_repository: (import 'codeartifact_repository.libsonnet'),
  codeartifact_repository_permissions_policy: (import 'codeartifact_repository_permissions_policy.libsonnet'),
  codebuild_project: (import 'codebuild_project.libsonnet'),
  codebuild_report_group: (import 'codebuild_report_group.libsonnet'),
  codebuild_resource_policy: (import 'codebuild_resource_policy.libsonnet'),
  codebuild_source_credential: (import 'codebuild_source_credential.libsonnet'),
  codebuild_webhook: (import 'codebuild_webhook.libsonnet'),
  codecommit_approval_rule_template: (import 'codecommit_approval_rule_template.libsonnet'),
  codecommit_approval_rule_template_association: (import 'codecommit_approval_rule_template_association.libsonnet'),
  codecommit_repository: (import 'codecommit_repository.libsonnet'),
  codecommit_trigger: (import 'codecommit_trigger.libsonnet'),
  codedeploy_app: (import 'codedeploy_app.libsonnet'),
  codedeploy_deployment_config: (import 'codedeploy_deployment_config.libsonnet'),
  codedeploy_deployment_group: (import 'codedeploy_deployment_group.libsonnet'),
  codepipeline: (import 'codepipeline.libsonnet'),
  codepipeline_custom_action_type: (import 'codepipeline_custom_action_type.libsonnet'),
  codepipeline_webhook: (import 'codepipeline_webhook.libsonnet'),
  codestarconnections_connection: (import 'codestarconnections_connection.libsonnet'),
  codestarconnections_host: (import 'codestarconnections_host.libsonnet'),
  codestarnotifications_notification_rule: (import 'codestarnotifications_notification_rule.libsonnet'),
  cognito_identity_pool: (import 'cognito_identity_pool.libsonnet'),
  cognito_identity_pool_provider_principal_tag: (import 'cognito_identity_pool_provider_principal_tag.libsonnet'),
  cognito_identity_pool_roles_attachment: (import 'cognito_identity_pool_roles_attachment.libsonnet'),
  cognito_identity_provider: (import 'cognito_identity_provider.libsonnet'),
  cognito_resource_server: (import 'cognito_resource_server.libsonnet'),
  cognito_risk_configuration: (import 'cognito_risk_configuration.libsonnet'),
  cognito_user: (import 'cognito_user.libsonnet'),
  cognito_user_group: (import 'cognito_user_group.libsonnet'),
  cognito_user_in_group: (import 'cognito_user_in_group.libsonnet'),
  cognito_user_pool: (import 'cognito_user_pool.libsonnet'),
  cognito_user_pool_client: (import 'cognito_user_pool_client.libsonnet'),
  cognito_user_pool_domain: (import 'cognito_user_pool_domain.libsonnet'),
  cognito_user_pool_ui_customization: (import 'cognito_user_pool_ui_customization.libsonnet'),
  comprehend_document_classifier: (import 'comprehend_document_classifier.libsonnet'),
  comprehend_entity_recognizer: (import 'comprehend_entity_recognizer.libsonnet'),
  config_aggregate_authorization: (import 'config_aggregate_authorization.libsonnet'),
  config_config_rule: (import 'config_config_rule.libsonnet'),
  config_configuration_aggregator: (import 'config_configuration_aggregator.libsonnet'),
  config_configuration_recorder: (import 'config_configuration_recorder.libsonnet'),
  config_configuration_recorder_status: (import 'config_configuration_recorder_status.libsonnet'),
  config_conformance_pack: (import 'config_conformance_pack.libsonnet'),
  config_delivery_channel: (import 'config_delivery_channel.libsonnet'),
  config_organization_conformance_pack: (import 'config_organization_conformance_pack.libsonnet'),
  config_organization_custom_rule: (import 'config_organization_custom_rule.libsonnet'),
  config_organization_managed_rule: (import 'config_organization_managed_rule.libsonnet'),
  config_remediation_configuration: (import 'config_remediation_configuration.libsonnet'),
  connect_bot_association: (import 'connect_bot_association.libsonnet'),
  connect_contact_flow: (import 'connect_contact_flow.libsonnet'),
  connect_contact_flow_module: (import 'connect_contact_flow_module.libsonnet'),
  connect_hours_of_operation: (import 'connect_hours_of_operation.libsonnet'),
  connect_instance: (import 'connect_instance.libsonnet'),
  connect_instance_storage_config: (import 'connect_instance_storage_config.libsonnet'),
  connect_lambda_function_association: (import 'connect_lambda_function_association.libsonnet'),
  connect_phone_number: (import 'connect_phone_number.libsonnet'),
  connect_queue: (import 'connect_queue.libsonnet'),
  connect_quick_connect: (import 'connect_quick_connect.libsonnet'),
  connect_routing_profile: (import 'connect_routing_profile.libsonnet'),
  connect_security_profile: (import 'connect_security_profile.libsonnet'),
  connect_user: (import 'connect_user.libsonnet'),
  connect_user_hierarchy_group: (import 'connect_user_hierarchy_group.libsonnet'),
  connect_user_hierarchy_structure: (import 'connect_user_hierarchy_structure.libsonnet'),
  connect_vocabulary: (import 'connect_vocabulary.libsonnet'),
  controltower_control: (import 'controltower_control.libsonnet'),
  cur_report_definition: (import 'cur_report_definition.libsonnet'),
  customer_gateway: (import 'customer_gateway.libsonnet'),
  dataexchange_data_set: (import 'dataexchange_data_set.libsonnet'),
  dataexchange_revision: (import 'dataexchange_revision.libsonnet'),
  datapipeline_pipeline: (import 'datapipeline_pipeline.libsonnet'),
  datapipeline_pipeline_definition: (import 'datapipeline_pipeline_definition.libsonnet'),
  datasync_agent: (import 'datasync_agent.libsonnet'),
  datasync_location_efs: (import 'datasync_location_efs.libsonnet'),
  datasync_location_fsx_lustre_file_system: (import 'datasync_location_fsx_lustre_file_system.libsonnet'),
  datasync_location_fsx_openzfs_file_system: (import 'datasync_location_fsx_openzfs_file_system.libsonnet'),
  datasync_location_fsx_windows_file_system: (import 'datasync_location_fsx_windows_file_system.libsonnet'),
  datasync_location_hdfs: (import 'datasync_location_hdfs.libsonnet'),
  datasync_location_nfs: (import 'datasync_location_nfs.libsonnet'),
  datasync_location_s3: (import 'datasync_location_s3.libsonnet'),
  datasync_location_smb: (import 'datasync_location_smb.libsonnet'),
  datasync_task: (import 'datasync_task.libsonnet'),
  dax_cluster: (import 'dax_cluster.libsonnet'),
  dax_parameter_group: (import 'dax_parameter_group.libsonnet'),
  dax_subnet_group: (import 'dax_subnet_group.libsonnet'),
  db_cluster_snapshot: (import 'db_cluster_snapshot.libsonnet'),
  db_event_subscription: (import 'db_event_subscription.libsonnet'),
  db_instance: (import 'db_instance.libsonnet'),
  db_instance_automated_backups_replication: (import 'db_instance_automated_backups_replication.libsonnet'),
  db_instance_role_association: (import 'db_instance_role_association.libsonnet'),
  db_option_group: (import 'db_option_group.libsonnet'),
  db_parameter_group: (import 'db_parameter_group.libsonnet'),
  db_proxy: (import 'db_proxy.libsonnet'),
  db_proxy_default_target_group: (import 'db_proxy_default_target_group.libsonnet'),
  db_proxy_endpoint: (import 'db_proxy_endpoint.libsonnet'),
  db_proxy_target: (import 'db_proxy_target.libsonnet'),
  db_security_group: (import 'db_security_group.libsonnet'),
  db_snapshot: (import 'db_snapshot.libsonnet'),
  db_snapshot_copy: (import 'db_snapshot_copy.libsonnet'),
  db_subnet_group: (import 'db_subnet_group.libsonnet'),
  default_network_acl: (import 'default_network_acl.libsonnet'),
  default_route_table: (import 'default_route_table.libsonnet'),
  default_security_group: (import 'default_security_group.libsonnet'),
  default_subnet: (import 'default_subnet.libsonnet'),
  default_vpc: (import 'default_vpc.libsonnet'),
  default_vpc_dhcp_options: (import 'default_vpc_dhcp_options.libsonnet'),
  detective_graph: (import 'detective_graph.libsonnet'),
  detective_invitation_accepter: (import 'detective_invitation_accepter.libsonnet'),
  detective_member: (import 'detective_member.libsonnet'),
  devicefarm_device_pool: (import 'devicefarm_device_pool.libsonnet'),
  devicefarm_instance_profile: (import 'devicefarm_instance_profile.libsonnet'),
  devicefarm_network_profile: (import 'devicefarm_network_profile.libsonnet'),
  devicefarm_project: (import 'devicefarm_project.libsonnet'),
  devicefarm_test_grid_project: (import 'devicefarm_test_grid_project.libsonnet'),
  devicefarm_upload: (import 'devicefarm_upload.libsonnet'),
  directory_service_conditional_forwarder: (import 'directory_service_conditional_forwarder.libsonnet'),
  directory_service_directory: (import 'directory_service_directory.libsonnet'),
  directory_service_log_subscription: (import 'directory_service_log_subscription.libsonnet'),
  directory_service_radius_settings: (import 'directory_service_radius_settings.libsonnet'),
  directory_service_region: (import 'directory_service_region.libsonnet'),
  directory_service_shared_directory: (import 'directory_service_shared_directory.libsonnet'),
  directory_service_shared_directory_accepter: (import 'directory_service_shared_directory_accepter.libsonnet'),
  dlm_lifecycle_policy: (import 'dlm_lifecycle_policy.libsonnet'),
  dms_certificate: (import 'dms_certificate.libsonnet'),
  dms_endpoint: (import 'dms_endpoint.libsonnet'),
  dms_event_subscription: (import 'dms_event_subscription.libsonnet'),
  dms_replication_instance: (import 'dms_replication_instance.libsonnet'),
  dms_replication_subnet_group: (import 'dms_replication_subnet_group.libsonnet'),
  dms_replication_task: (import 'dms_replication_task.libsonnet'),
  dms_s3_endpoint: (import 'dms_s3_endpoint.libsonnet'),
  docdb_cluster: (import 'docdb_cluster.libsonnet'),
  docdb_cluster_instance: (import 'docdb_cluster_instance.libsonnet'),
  docdb_cluster_parameter_group: (import 'docdb_cluster_parameter_group.libsonnet'),
  docdb_cluster_snapshot: (import 'docdb_cluster_snapshot.libsonnet'),
  docdb_event_subscription: (import 'docdb_event_subscription.libsonnet'),
  docdb_global_cluster: (import 'docdb_global_cluster.libsonnet'),
  docdb_subnet_group: (import 'docdb_subnet_group.libsonnet'),
  dx_bgp_peer: (import 'dx_bgp_peer.libsonnet'),
  dx_connection: (import 'dx_connection.libsonnet'),
  dx_connection_association: (import 'dx_connection_association.libsonnet'),
  dx_connection_confirmation: (import 'dx_connection_confirmation.libsonnet'),
  dx_gateway: (import 'dx_gateway.libsonnet'),
  dx_gateway_association: (import 'dx_gateway_association.libsonnet'),
  dx_gateway_association_proposal: (import 'dx_gateway_association_proposal.libsonnet'),
  dx_hosted_connection: (import 'dx_hosted_connection.libsonnet'),
  dx_hosted_private_virtual_interface: (import 'dx_hosted_private_virtual_interface.libsonnet'),
  dx_hosted_private_virtual_interface_accepter: (import 'dx_hosted_private_virtual_interface_accepter.libsonnet'),
  dx_hosted_public_virtual_interface: (import 'dx_hosted_public_virtual_interface.libsonnet'),
  dx_hosted_public_virtual_interface_accepter: (import 'dx_hosted_public_virtual_interface_accepter.libsonnet'),
  dx_hosted_transit_virtual_interface: (import 'dx_hosted_transit_virtual_interface.libsonnet'),
  dx_hosted_transit_virtual_interface_accepter: (import 'dx_hosted_transit_virtual_interface_accepter.libsonnet'),
  dx_lag: (import 'dx_lag.libsonnet'),
  dx_private_virtual_interface: (import 'dx_private_virtual_interface.libsonnet'),
  dx_public_virtual_interface: (import 'dx_public_virtual_interface.libsonnet'),
  dx_transit_virtual_interface: (import 'dx_transit_virtual_interface.libsonnet'),
  dynamodb_contributor_insights: (import 'dynamodb_contributor_insights.libsonnet'),
  dynamodb_global_table: (import 'dynamodb_global_table.libsonnet'),
  dynamodb_kinesis_streaming_destination: (import 'dynamodb_kinesis_streaming_destination.libsonnet'),
  dynamodb_table: (import 'dynamodb_table.libsonnet'),
  dynamodb_table_item: (import 'dynamodb_table_item.libsonnet'),
  dynamodb_table_replica: (import 'dynamodb_table_replica.libsonnet'),
  dynamodb_tag: (import 'dynamodb_tag.libsonnet'),
  ebs_default_kms_key: (import 'ebs_default_kms_key.libsonnet'),
  ebs_encryption_by_default: (import 'ebs_encryption_by_default.libsonnet'),
  ebs_snapshot: (import 'ebs_snapshot.libsonnet'),
  ebs_snapshot_copy: (import 'ebs_snapshot_copy.libsonnet'),
  ebs_snapshot_import: (import 'ebs_snapshot_import.libsonnet'),
  ebs_volume: (import 'ebs_volume.libsonnet'),
  ec2_availability_zone_group: (import 'ec2_availability_zone_group.libsonnet'),
  ec2_capacity_reservation: (import 'ec2_capacity_reservation.libsonnet'),
  ec2_carrier_gateway: (import 'ec2_carrier_gateway.libsonnet'),
  ec2_client_vpn_authorization_rule: (import 'ec2_client_vpn_authorization_rule.libsonnet'),
  ec2_client_vpn_endpoint: (import 'ec2_client_vpn_endpoint.libsonnet'),
  ec2_client_vpn_network_association: (import 'ec2_client_vpn_network_association.libsonnet'),
  ec2_client_vpn_route: (import 'ec2_client_vpn_route.libsonnet'),
  ec2_fleet: (import 'ec2_fleet.libsonnet'),
  ec2_host: (import 'ec2_host.libsonnet'),
  ec2_local_gateway_route: (import 'ec2_local_gateway_route.libsonnet'),
  ec2_local_gateway_route_table_vpc_association: (import 'ec2_local_gateway_route_table_vpc_association.libsonnet'),
  ec2_managed_prefix_list: (import 'ec2_managed_prefix_list.libsonnet'),
  ec2_managed_prefix_list_entry: (import 'ec2_managed_prefix_list_entry.libsonnet'),
  ec2_network_insights_analysis: (import 'ec2_network_insights_analysis.libsonnet'),
  ec2_network_insights_path: (import 'ec2_network_insights_path.libsonnet'),
  ec2_serial_console_access: (import 'ec2_serial_console_access.libsonnet'),
  ec2_subnet_cidr_reservation: (import 'ec2_subnet_cidr_reservation.libsonnet'),
  ec2_tag: (import 'ec2_tag.libsonnet'),
  ec2_traffic_mirror_filter: (import 'ec2_traffic_mirror_filter.libsonnet'),
  ec2_traffic_mirror_filter_rule: (import 'ec2_traffic_mirror_filter_rule.libsonnet'),
  ec2_traffic_mirror_session: (import 'ec2_traffic_mirror_session.libsonnet'),
  ec2_traffic_mirror_target: (import 'ec2_traffic_mirror_target.libsonnet'),
  ec2_transit_gateway: (import 'ec2_transit_gateway.libsonnet'),
  ec2_transit_gateway_connect: (import 'ec2_transit_gateway_connect.libsonnet'),
  ec2_transit_gateway_connect_peer: (import 'ec2_transit_gateway_connect_peer.libsonnet'),
  ec2_transit_gateway_multicast_domain: (import 'ec2_transit_gateway_multicast_domain.libsonnet'),
  ec2_transit_gateway_multicast_domain_association: (import 'ec2_transit_gateway_multicast_domain_association.libsonnet'),
  ec2_transit_gateway_multicast_group_member: (import 'ec2_transit_gateway_multicast_group_member.libsonnet'),
  ec2_transit_gateway_multicast_group_source: (import 'ec2_transit_gateway_multicast_group_source.libsonnet'),
  ec2_transit_gateway_peering_attachment: (import 'ec2_transit_gateway_peering_attachment.libsonnet'),
  ec2_transit_gateway_peering_attachment_accepter: (import 'ec2_transit_gateway_peering_attachment_accepter.libsonnet'),
  ec2_transit_gateway_policy_table: (import 'ec2_transit_gateway_policy_table.libsonnet'),
  ec2_transit_gateway_policy_table_association: (import 'ec2_transit_gateway_policy_table_association.libsonnet'),
  ec2_transit_gateway_prefix_list_reference: (import 'ec2_transit_gateway_prefix_list_reference.libsonnet'),
  ec2_transit_gateway_route: (import 'ec2_transit_gateway_route.libsonnet'),
  ec2_transit_gateway_route_table: (import 'ec2_transit_gateway_route_table.libsonnet'),
  ec2_transit_gateway_route_table_association: (import 'ec2_transit_gateway_route_table_association.libsonnet'),
  ec2_transit_gateway_route_table_propagation: (import 'ec2_transit_gateway_route_table_propagation.libsonnet'),
  ec2_transit_gateway_vpc_attachment: (import 'ec2_transit_gateway_vpc_attachment.libsonnet'),
  ec2_transit_gateway_vpc_attachment_accepter: (import 'ec2_transit_gateway_vpc_attachment_accepter.libsonnet'),
  ecr_lifecycle_policy: (import 'ecr_lifecycle_policy.libsonnet'),
  ecr_pull_through_cache_rule: (import 'ecr_pull_through_cache_rule.libsonnet'),
  ecr_registry_policy: (import 'ecr_registry_policy.libsonnet'),
  ecr_registry_scanning_configuration: (import 'ecr_registry_scanning_configuration.libsonnet'),
  ecr_replication_configuration: (import 'ecr_replication_configuration.libsonnet'),
  ecr_repository: (import 'ecr_repository.libsonnet'),
  ecr_repository_policy: (import 'ecr_repository_policy.libsonnet'),
  ecrpublic_repository: (import 'ecrpublic_repository.libsonnet'),
  ecrpublic_repository_policy: (import 'ecrpublic_repository_policy.libsonnet'),
  ecs_account_setting_default: (import 'ecs_account_setting_default.libsonnet'),
  ecs_capacity_provider: (import 'ecs_capacity_provider.libsonnet'),
  ecs_cluster: (import 'ecs_cluster.libsonnet'),
  ecs_cluster_capacity_providers: (import 'ecs_cluster_capacity_providers.libsonnet'),
  ecs_service: (import 'ecs_service.libsonnet'),
  ecs_tag: (import 'ecs_tag.libsonnet'),
  ecs_task_definition: (import 'ecs_task_definition.libsonnet'),
  ecs_task_set: (import 'ecs_task_set.libsonnet'),
  efs_access_point: (import 'efs_access_point.libsonnet'),
  efs_backup_policy: (import 'efs_backup_policy.libsonnet'),
  efs_file_system: (import 'efs_file_system.libsonnet'),
  efs_file_system_policy: (import 'efs_file_system_policy.libsonnet'),
  efs_mount_target: (import 'efs_mount_target.libsonnet'),
  efs_replication_configuration: (import 'efs_replication_configuration.libsonnet'),
  egress_only_internet_gateway: (import 'egress_only_internet_gateway.libsonnet'),
  eip: (import 'eip.libsonnet'),
  eip_association: (import 'eip_association.libsonnet'),
  eks_addon: (import 'eks_addon.libsonnet'),
  eks_cluster: (import 'eks_cluster.libsonnet'),
  eks_fargate_profile: (import 'eks_fargate_profile.libsonnet'),
  eks_identity_provider_config: (import 'eks_identity_provider_config.libsonnet'),
  eks_node_group: (import 'eks_node_group.libsonnet'),
  elastic_beanstalk_application: (import 'elastic_beanstalk_application.libsonnet'),
  elastic_beanstalk_application_version: (import 'elastic_beanstalk_application_version.libsonnet'),
  elastic_beanstalk_configuration_template: (import 'elastic_beanstalk_configuration_template.libsonnet'),
  elastic_beanstalk_environment: (import 'elastic_beanstalk_environment.libsonnet'),
  elasticache_cluster: (import 'elasticache_cluster.libsonnet'),
  elasticache_global_replication_group: (import 'elasticache_global_replication_group.libsonnet'),
  elasticache_parameter_group: (import 'elasticache_parameter_group.libsonnet'),
  elasticache_replication_group: (import 'elasticache_replication_group.libsonnet'),
  elasticache_security_group: (import 'elasticache_security_group.libsonnet'),
  elasticache_subnet_group: (import 'elasticache_subnet_group.libsonnet'),
  elasticache_user: (import 'elasticache_user.libsonnet'),
  elasticache_user_group: (import 'elasticache_user_group.libsonnet'),
  elasticache_user_group_association: (import 'elasticache_user_group_association.libsonnet'),
  elasticsearch_domain: (import 'elasticsearch_domain.libsonnet'),
  elasticsearch_domain_policy: (import 'elasticsearch_domain_policy.libsonnet'),
  elasticsearch_domain_saml_options: (import 'elasticsearch_domain_saml_options.libsonnet'),
  elastictranscoder_pipeline: (import 'elastictranscoder_pipeline.libsonnet'),
  elastictranscoder_preset: (import 'elastictranscoder_preset.libsonnet'),
  elb: (import 'elb.libsonnet'),
  elb_attachment: (import 'elb_attachment.libsonnet'),
  emr_cluster: (import 'emr_cluster.libsonnet'),
  emr_instance_fleet: (import 'emr_instance_fleet.libsonnet'),
  emr_instance_group: (import 'emr_instance_group.libsonnet'),
  emr_managed_scaling_policy: (import 'emr_managed_scaling_policy.libsonnet'),
  emr_security_configuration: (import 'emr_security_configuration.libsonnet'),
  emr_studio: (import 'emr_studio.libsonnet'),
  emr_studio_session_mapping: (import 'emr_studio_session_mapping.libsonnet'),
  emrcontainers_virtual_cluster: (import 'emrcontainers_virtual_cluster.libsonnet'),
  emrserverless_application: (import 'emrserverless_application.libsonnet'),
  evidently_feature: (import 'evidently_feature.libsonnet'),
  evidently_project: (import 'evidently_project.libsonnet'),
  evidently_segment: (import 'evidently_segment.libsonnet'),
  fis_experiment_template: (import 'fis_experiment_template.libsonnet'),
  flow_log: (import 'flow_log.libsonnet'),
  fms_admin_account: (import 'fms_admin_account.libsonnet'),
  fms_policy: (import 'fms_policy.libsonnet'),
  fsx_backup: (import 'fsx_backup.libsonnet'),
  fsx_data_repository_association: (import 'fsx_data_repository_association.libsonnet'),
  fsx_file_cache: (import 'fsx_file_cache.libsonnet'),
  fsx_lustre_file_system: (import 'fsx_lustre_file_system.libsonnet'),
  fsx_ontap_file_system: (import 'fsx_ontap_file_system.libsonnet'),
  fsx_ontap_storage_virtual_machine: (import 'fsx_ontap_storage_virtual_machine.libsonnet'),
  fsx_ontap_volume: (import 'fsx_ontap_volume.libsonnet'),
  fsx_openzfs_file_system: (import 'fsx_openzfs_file_system.libsonnet'),
  fsx_openzfs_snapshot: (import 'fsx_openzfs_snapshot.libsonnet'),
  fsx_openzfs_volume: (import 'fsx_openzfs_volume.libsonnet'),
  fsx_windows_file_system: (import 'fsx_windows_file_system.libsonnet'),
  gamelift_alias: (import 'gamelift_alias.libsonnet'),
  gamelift_build: (import 'gamelift_build.libsonnet'),
  gamelift_fleet: (import 'gamelift_fleet.libsonnet'),
  gamelift_game_server_group: (import 'gamelift_game_server_group.libsonnet'),
  gamelift_game_session_queue: (import 'gamelift_game_session_queue.libsonnet'),
  gamelift_script: (import 'gamelift_script.libsonnet'),
  glacier_vault: (import 'glacier_vault.libsonnet'),
  glacier_vault_lock: (import 'glacier_vault_lock.libsonnet'),
  globalaccelerator_accelerator: (import 'globalaccelerator_accelerator.libsonnet'),
  globalaccelerator_endpoint_group: (import 'globalaccelerator_endpoint_group.libsonnet'),
  globalaccelerator_listener: (import 'globalaccelerator_listener.libsonnet'),
  glue_catalog_database: (import 'glue_catalog_database.libsonnet'),
  glue_catalog_table: (import 'glue_catalog_table.libsonnet'),
  glue_classifier: (import 'glue_classifier.libsonnet'),
  glue_connection: (import 'glue_connection.libsonnet'),
  glue_crawler: (import 'glue_crawler.libsonnet'),
  glue_data_catalog_encryption_settings: (import 'glue_data_catalog_encryption_settings.libsonnet'),
  glue_dev_endpoint: (import 'glue_dev_endpoint.libsonnet'),
  glue_job: (import 'glue_job.libsonnet'),
  glue_ml_transform: (import 'glue_ml_transform.libsonnet'),
  glue_partition: (import 'glue_partition.libsonnet'),
  glue_partition_index: (import 'glue_partition_index.libsonnet'),
  glue_registry: (import 'glue_registry.libsonnet'),
  glue_resource_policy: (import 'glue_resource_policy.libsonnet'),
  glue_schema: (import 'glue_schema.libsonnet'),
  glue_security_configuration: (import 'glue_security_configuration.libsonnet'),
  glue_trigger: (import 'glue_trigger.libsonnet'),
  glue_user_defined_function: (import 'glue_user_defined_function.libsonnet'),
  glue_workflow: (import 'glue_workflow.libsonnet'),
  grafana_license_association: (import 'grafana_license_association.libsonnet'),
  grafana_role_association: (import 'grafana_role_association.libsonnet'),
  grafana_workspace: (import 'grafana_workspace.libsonnet'),
  grafana_workspace_api_key: (import 'grafana_workspace_api_key.libsonnet'),
  grafana_workspace_saml_configuration: (import 'grafana_workspace_saml_configuration.libsonnet'),
  guardduty_detector: (import 'guardduty_detector.libsonnet'),
  guardduty_filter: (import 'guardduty_filter.libsonnet'),
  guardduty_invite_accepter: (import 'guardduty_invite_accepter.libsonnet'),
  guardduty_ipset: (import 'guardduty_ipset.libsonnet'),
  guardduty_member: (import 'guardduty_member.libsonnet'),
  guardduty_organization_admin_account: (import 'guardduty_organization_admin_account.libsonnet'),
  guardduty_organization_configuration: (import 'guardduty_organization_configuration.libsonnet'),
  guardduty_publishing_destination: (import 'guardduty_publishing_destination.libsonnet'),
  guardduty_threatintelset: (import 'guardduty_threatintelset.libsonnet'),
  iam_access_key: (import 'iam_access_key.libsonnet'),
  iam_account_alias: (import 'iam_account_alias.libsonnet'),
  iam_account_password_policy: (import 'iam_account_password_policy.libsonnet'),
  iam_group: (import 'iam_group.libsonnet'),
  iam_group_membership: (import 'iam_group_membership.libsonnet'),
  iam_group_policy: (import 'iam_group_policy.libsonnet'),
  iam_group_policy_attachment: (import 'iam_group_policy_attachment.libsonnet'),
  iam_instance_profile: (import 'iam_instance_profile.libsonnet'),
  iam_openid_connect_provider: (import 'iam_openid_connect_provider.libsonnet'),
  iam_policy: (import 'iam_policy.libsonnet'),
  iam_policy_attachment: (import 'iam_policy_attachment.libsonnet'),
  iam_role: (import 'iam_role.libsonnet'),
  iam_role_policy: (import 'iam_role_policy.libsonnet'),
  iam_role_policy_attachment: (import 'iam_role_policy_attachment.libsonnet'),
  iam_saml_provider: (import 'iam_saml_provider.libsonnet'),
  iam_server_certificate: (import 'iam_server_certificate.libsonnet'),
  iam_service_linked_role: (import 'iam_service_linked_role.libsonnet'),
  iam_service_specific_credential: (import 'iam_service_specific_credential.libsonnet'),
  iam_signing_certificate: (import 'iam_signing_certificate.libsonnet'),
  iam_user: (import 'iam_user.libsonnet'),
  iam_user_group_membership: (import 'iam_user_group_membership.libsonnet'),
  iam_user_login_profile: (import 'iam_user_login_profile.libsonnet'),
  iam_user_policy: (import 'iam_user_policy.libsonnet'),
  iam_user_policy_attachment: (import 'iam_user_policy_attachment.libsonnet'),
  iam_user_ssh_key: (import 'iam_user_ssh_key.libsonnet'),
  iam_virtual_mfa_device: (import 'iam_virtual_mfa_device.libsonnet'),
  identitystore_group: (import 'identitystore_group.libsonnet'),
  identitystore_group_membership: (import 'identitystore_group_membership.libsonnet'),
  identitystore_user: (import 'identitystore_user.libsonnet'),
  imagebuilder_component: (import 'imagebuilder_component.libsonnet'),
  imagebuilder_container_recipe: (import 'imagebuilder_container_recipe.libsonnet'),
  imagebuilder_distribution_configuration: (import 'imagebuilder_distribution_configuration.libsonnet'),
  imagebuilder_image: (import 'imagebuilder_image.libsonnet'),
  imagebuilder_image_pipeline: (import 'imagebuilder_image_pipeline.libsonnet'),
  imagebuilder_image_recipe: (import 'imagebuilder_image_recipe.libsonnet'),
  imagebuilder_infrastructure_configuration: (import 'imagebuilder_infrastructure_configuration.libsonnet'),
  inspector2_delegated_admin_account: (import 'inspector2_delegated_admin_account.libsonnet'),
  inspector2_enabler: (import 'inspector2_enabler.libsonnet'),
  inspector2_organization_configuration: (import 'inspector2_organization_configuration.libsonnet'),
  inspector_assessment_target: (import 'inspector_assessment_target.libsonnet'),
  inspector_assessment_template: (import 'inspector_assessment_template.libsonnet'),
  inspector_resource_group: (import 'inspector_resource_group.libsonnet'),
  instance: (import 'instance.libsonnet'),
  internet_gateway: (import 'internet_gateway.libsonnet'),
  internet_gateway_attachment: (import 'internet_gateway_attachment.libsonnet'),
  iot_authorizer: (import 'iot_authorizer.libsonnet'),
  iot_certificate: (import 'iot_certificate.libsonnet'),
  iot_indexing_configuration: (import 'iot_indexing_configuration.libsonnet'),
  iot_logging_options: (import 'iot_logging_options.libsonnet'),
  iot_policy: (import 'iot_policy.libsonnet'),
  iot_policy_attachment: (import 'iot_policy_attachment.libsonnet'),
  iot_provisioning_template: (import 'iot_provisioning_template.libsonnet'),
  iot_role_alias: (import 'iot_role_alias.libsonnet'),
  iot_thing: (import 'iot_thing.libsonnet'),
  iot_thing_group: (import 'iot_thing_group.libsonnet'),
  iot_thing_group_membership: (import 'iot_thing_group_membership.libsonnet'),
  iot_thing_principal_attachment: (import 'iot_thing_principal_attachment.libsonnet'),
  iot_thing_type: (import 'iot_thing_type.libsonnet'),
  iot_topic_rule: (import 'iot_topic_rule.libsonnet'),
  iot_topic_rule_destination: (import 'iot_topic_rule_destination.libsonnet'),
  ivs_channel: (import 'ivs_channel.libsonnet'),
  ivs_playback_key_pair: (import 'ivs_playback_key_pair.libsonnet'),
  ivs_recording_configuration: (import 'ivs_recording_configuration.libsonnet'),
  ivschat_logging_configuration: (import 'ivschat_logging_configuration.libsonnet'),
  ivschat_room: (import 'ivschat_room.libsonnet'),
  kendra_data_source: (import 'kendra_data_source.libsonnet'),
  kendra_experience: (import 'kendra_experience.libsonnet'),
  kendra_faq: (import 'kendra_faq.libsonnet'),
  kendra_index: (import 'kendra_index.libsonnet'),
  kendra_query_suggestions_block_list: (import 'kendra_query_suggestions_block_list.libsonnet'),
  kendra_thesaurus: (import 'kendra_thesaurus.libsonnet'),
  key_pair: (import 'key_pair.libsonnet'),
  keyspaces_keyspace: (import 'keyspaces_keyspace.libsonnet'),
  keyspaces_table: (import 'keyspaces_table.libsonnet'),
  kinesis_analytics_application: (import 'kinesis_analytics_application.libsonnet'),
  kinesis_firehose_delivery_stream: (import 'kinesis_firehose_delivery_stream.libsonnet'),
  kinesis_stream: (import 'kinesis_stream.libsonnet'),
  kinesis_stream_consumer: (import 'kinesis_stream_consumer.libsonnet'),
  kinesis_video_stream: (import 'kinesis_video_stream.libsonnet'),
  kinesisanalyticsv2_application: (import 'kinesisanalyticsv2_application.libsonnet'),
  kinesisanalyticsv2_application_snapshot: (import 'kinesisanalyticsv2_application_snapshot.libsonnet'),
  kms_alias: (import 'kms_alias.libsonnet'),
  kms_ciphertext: (import 'kms_ciphertext.libsonnet'),
  kms_custom_key_store: (import 'kms_custom_key_store.libsonnet'),
  kms_external_key: (import 'kms_external_key.libsonnet'),
  kms_grant: (import 'kms_grant.libsonnet'),
  kms_key: (import 'kms_key.libsonnet'),
  kms_replica_external_key: (import 'kms_replica_external_key.libsonnet'),
  kms_replica_key: (import 'kms_replica_key.libsonnet'),
  lakeformation_data_lake_settings: (import 'lakeformation_data_lake_settings.libsonnet'),
  lakeformation_lf_tag: (import 'lakeformation_lf_tag.libsonnet'),
  lakeformation_permissions: (import 'lakeformation_permissions.libsonnet'),
  lakeformation_resource: (import 'lakeformation_resource.libsonnet'),
  lakeformation_resource_lf_tags: (import 'lakeformation_resource_lf_tags.libsonnet'),
  lambda_alias: (import 'lambda_alias.libsonnet'),
  lambda_code_signing_config: (import 'lambda_code_signing_config.libsonnet'),
  lambda_event_source_mapping: (import 'lambda_event_source_mapping.libsonnet'),
  lambda_function: (import 'lambda_function.libsonnet'),
  lambda_function_event_invoke_config: (import 'lambda_function_event_invoke_config.libsonnet'),
  lambda_function_url: (import 'lambda_function_url.libsonnet'),
  lambda_invocation: (import 'lambda_invocation.libsonnet'),
  lambda_layer_version: (import 'lambda_layer_version.libsonnet'),
  lambda_layer_version_permission: (import 'lambda_layer_version_permission.libsonnet'),
  lambda_permission: (import 'lambda_permission.libsonnet'),
  lambda_provisioned_concurrency_config: (import 'lambda_provisioned_concurrency_config.libsonnet'),
  launch_configuration: (import 'launch_configuration.libsonnet'),
  launch_template: (import 'launch_template.libsonnet'),
  lb: (import 'lb.libsonnet'),
  lb_cookie_stickiness_policy: (import 'lb_cookie_stickiness_policy.libsonnet'),
  lb_listener: (import 'lb_listener.libsonnet'),
  lb_listener_certificate: (import 'lb_listener_certificate.libsonnet'),
  lb_listener_rule: (import 'lb_listener_rule.libsonnet'),
  lb_ssl_negotiation_policy: (import 'lb_ssl_negotiation_policy.libsonnet'),
  lb_target_group: (import 'lb_target_group.libsonnet'),
  lb_target_group_attachment: (import 'lb_target_group_attachment.libsonnet'),
  lex_bot: (import 'lex_bot.libsonnet'),
  lex_bot_alias: (import 'lex_bot_alias.libsonnet'),
  lex_intent: (import 'lex_intent.libsonnet'),
  lex_slot_type: (import 'lex_slot_type.libsonnet'),
  licensemanager_association: (import 'licensemanager_association.libsonnet'),
  licensemanager_license_configuration: (import 'licensemanager_license_configuration.libsonnet'),
  lightsail_certificate: (import 'lightsail_certificate.libsonnet'),
  lightsail_container_service: (import 'lightsail_container_service.libsonnet'),
  lightsail_container_service_deployment_version: (import 'lightsail_container_service_deployment_version.libsonnet'),
  lightsail_database: (import 'lightsail_database.libsonnet'),
  lightsail_disk: (import 'lightsail_disk.libsonnet'),
  lightsail_disk_attachment: (import 'lightsail_disk_attachment.libsonnet'),
  lightsail_domain: (import 'lightsail_domain.libsonnet'),
  lightsail_domain_entry: (import 'lightsail_domain_entry.libsonnet'),
  lightsail_instance: (import 'lightsail_instance.libsonnet'),
  lightsail_instance_public_ports: (import 'lightsail_instance_public_ports.libsonnet'),
  lightsail_key_pair: (import 'lightsail_key_pair.libsonnet'),
  lightsail_lb: (import 'lightsail_lb.libsonnet'),
  lightsail_lb_attachment: (import 'lightsail_lb_attachment.libsonnet'),
  lightsail_lb_certificate: (import 'lightsail_lb_certificate.libsonnet'),
  lightsail_lb_certificate_attachment: (import 'lightsail_lb_certificate_attachment.libsonnet'),
  lightsail_lb_https_redirection_policy: (import 'lightsail_lb_https_redirection_policy.libsonnet'),
  lightsail_lb_stickiness_policy: (import 'lightsail_lb_stickiness_policy.libsonnet'),
  lightsail_static_ip: (import 'lightsail_static_ip.libsonnet'),
  lightsail_static_ip_attachment: (import 'lightsail_static_ip_attachment.libsonnet'),
  load_balancer_backend_server_policy: (import 'load_balancer_backend_server_policy.libsonnet'),
  load_balancer_listener_policy: (import 'load_balancer_listener_policy.libsonnet'),
  load_balancer_policy: (import 'load_balancer_policy.libsonnet'),
  location_geofence_collection: (import 'location_geofence_collection.libsonnet'),
  location_map: (import 'location_map.libsonnet'),
  location_place_index: (import 'location_place_index.libsonnet'),
  location_route_calculator: (import 'location_route_calculator.libsonnet'),
  location_tracker: (import 'location_tracker.libsonnet'),
  location_tracker_association: (import 'location_tracker_association.libsonnet'),
  macie2_account: (import 'macie2_account.libsonnet'),
  macie2_classification_export_configuration: (import 'macie2_classification_export_configuration.libsonnet'),
  macie2_classification_job: (import 'macie2_classification_job.libsonnet'),
  macie2_custom_data_identifier: (import 'macie2_custom_data_identifier.libsonnet'),
  macie2_findings_filter: (import 'macie2_findings_filter.libsonnet'),
  macie2_invitation_accepter: (import 'macie2_invitation_accepter.libsonnet'),
  macie2_member: (import 'macie2_member.libsonnet'),
  macie2_organization_admin_account: (import 'macie2_organization_admin_account.libsonnet'),
  macie_member_account_association: (import 'macie_member_account_association.libsonnet'),
  macie_s3_bucket_association: (import 'macie_s3_bucket_association.libsonnet'),
  main_route_table_association: (import 'main_route_table_association.libsonnet'),
  media_convert_queue: (import 'media_convert_queue.libsonnet'),
  media_package_channel: (import 'media_package_channel.libsonnet'),
  media_store_container: (import 'media_store_container.libsonnet'),
  media_store_container_policy: (import 'media_store_container_policy.libsonnet'),
  medialive_channel: (import 'medialive_channel.libsonnet'),
  medialive_input: (import 'medialive_input.libsonnet'),
  medialive_input_security_group: (import 'medialive_input_security_group.libsonnet'),
  medialive_multiplex: (import 'medialive_multiplex.libsonnet'),
  medialive_multiplex_program: (import 'medialive_multiplex_program.libsonnet'),
  memorydb_acl: (import 'memorydb_acl.libsonnet'),
  memorydb_cluster: (import 'memorydb_cluster.libsonnet'),
  memorydb_parameter_group: (import 'memorydb_parameter_group.libsonnet'),
  memorydb_snapshot: (import 'memorydb_snapshot.libsonnet'),
  memorydb_subnet_group: (import 'memorydb_subnet_group.libsonnet'),
  memorydb_user: (import 'memorydb_user.libsonnet'),
  mq_broker: (import 'mq_broker.libsonnet'),
  mq_configuration: (import 'mq_configuration.libsonnet'),
  msk_cluster: (import 'msk_cluster.libsonnet'),
  msk_configuration: (import 'msk_configuration.libsonnet'),
  msk_scram_secret_association: (import 'msk_scram_secret_association.libsonnet'),
  msk_serverless_cluster: (import 'msk_serverless_cluster.libsonnet'),
  mskconnect_connector: (import 'mskconnect_connector.libsonnet'),
  mskconnect_custom_plugin: (import 'mskconnect_custom_plugin.libsonnet'),
  mskconnect_worker_configuration: (import 'mskconnect_worker_configuration.libsonnet'),
  mwaa_environment: (import 'mwaa_environment.libsonnet'),
  nat_gateway: (import 'nat_gateway.libsonnet'),
  neptune_cluster: (import 'neptune_cluster.libsonnet'),
  neptune_cluster_endpoint: (import 'neptune_cluster_endpoint.libsonnet'),
  neptune_cluster_instance: (import 'neptune_cluster_instance.libsonnet'),
  neptune_cluster_parameter_group: (import 'neptune_cluster_parameter_group.libsonnet'),
  neptune_cluster_snapshot: (import 'neptune_cluster_snapshot.libsonnet'),
  neptune_event_subscription: (import 'neptune_event_subscription.libsonnet'),
  neptune_global_cluster: (import 'neptune_global_cluster.libsonnet'),
  neptune_parameter_group: (import 'neptune_parameter_group.libsonnet'),
  neptune_subnet_group: (import 'neptune_subnet_group.libsonnet'),
  network_acl: (import 'network_acl.libsonnet'),
  network_acl_association: (import 'network_acl_association.libsonnet'),
  network_acl_rule: (import 'network_acl_rule.libsonnet'),
  network_interface: (import 'network_interface.libsonnet'),
  network_interface_attachment: (import 'network_interface_attachment.libsonnet'),
  network_interface_sg_attachment: (import 'network_interface_sg_attachment.libsonnet'),
  networkfirewall_firewall: (import 'networkfirewall_firewall.libsonnet'),
  networkfirewall_firewall_policy: (import 'networkfirewall_firewall_policy.libsonnet'),
  networkfirewall_logging_configuration: (import 'networkfirewall_logging_configuration.libsonnet'),
  networkfirewall_resource_policy: (import 'networkfirewall_resource_policy.libsonnet'),
  networkfirewall_rule_group: (import 'networkfirewall_rule_group.libsonnet'),
  networkmanager_attachment_accepter: (import 'networkmanager_attachment_accepter.libsonnet'),
  networkmanager_connect_attachment: (import 'networkmanager_connect_attachment.libsonnet'),
  networkmanager_connection: (import 'networkmanager_connection.libsonnet'),
  networkmanager_core_network: (import 'networkmanager_core_network.libsonnet'),
  networkmanager_customer_gateway_association: (import 'networkmanager_customer_gateway_association.libsonnet'),
  networkmanager_device: (import 'networkmanager_device.libsonnet'),
  networkmanager_global_network: (import 'networkmanager_global_network.libsonnet'),
  networkmanager_link: (import 'networkmanager_link.libsonnet'),
  networkmanager_link_association: (import 'networkmanager_link_association.libsonnet'),
  networkmanager_site: (import 'networkmanager_site.libsonnet'),
  networkmanager_site_to_site_vpn_attachment: (import 'networkmanager_site_to_site_vpn_attachment.libsonnet'),
  networkmanager_transit_gateway_connect_peer_association: (import 'networkmanager_transit_gateway_connect_peer_association.libsonnet'),
  networkmanager_transit_gateway_peering: (import 'networkmanager_transit_gateway_peering.libsonnet'),
  networkmanager_transit_gateway_registration: (import 'networkmanager_transit_gateway_registration.libsonnet'),
  networkmanager_transit_gateway_route_table_attachment: (import 'networkmanager_transit_gateway_route_table_attachment.libsonnet'),
  networkmanager_vpc_attachment: (import 'networkmanager_vpc_attachment.libsonnet'),
  opensearch_domain: (import 'opensearch_domain.libsonnet'),
  opensearch_domain_policy: (import 'opensearch_domain_policy.libsonnet'),
  opensearch_domain_saml_options: (import 'opensearch_domain_saml_options.libsonnet'),
  opensearch_inbound_connection_accepter: (import 'opensearch_inbound_connection_accepter.libsonnet'),
  opensearch_outbound_connection: (import 'opensearch_outbound_connection.libsonnet'),
  opsworks_application: (import 'opsworks_application.libsonnet'),
  opsworks_custom_layer: (import 'opsworks_custom_layer.libsonnet'),
  opsworks_ecs_cluster_layer: (import 'opsworks_ecs_cluster_layer.libsonnet'),
  opsworks_ganglia_layer: (import 'opsworks_ganglia_layer.libsonnet'),
  opsworks_haproxy_layer: (import 'opsworks_haproxy_layer.libsonnet'),
  opsworks_instance: (import 'opsworks_instance.libsonnet'),
  opsworks_java_app_layer: (import 'opsworks_java_app_layer.libsonnet'),
  opsworks_memcached_layer: (import 'opsworks_memcached_layer.libsonnet'),
  opsworks_mysql_layer: (import 'opsworks_mysql_layer.libsonnet'),
  opsworks_nodejs_app_layer: (import 'opsworks_nodejs_app_layer.libsonnet'),
  opsworks_permission: (import 'opsworks_permission.libsonnet'),
  opsworks_php_app_layer: (import 'opsworks_php_app_layer.libsonnet'),
  opsworks_rails_app_layer: (import 'opsworks_rails_app_layer.libsonnet'),
  opsworks_rds_db_instance: (import 'opsworks_rds_db_instance.libsonnet'),
  opsworks_stack: (import 'opsworks_stack.libsonnet'),
  opsworks_static_web_layer: (import 'opsworks_static_web_layer.libsonnet'),
  opsworks_user_profile: (import 'opsworks_user_profile.libsonnet'),
  organizations_account: (import 'organizations_account.libsonnet'),
  organizations_delegated_administrator: (import 'organizations_delegated_administrator.libsonnet'),
  organizations_organization: (import 'organizations_organization.libsonnet'),
  organizations_organizational_unit: (import 'organizations_organizational_unit.libsonnet'),
  organizations_policy: (import 'organizations_policy.libsonnet'),
  organizations_policy_attachment: (import 'organizations_policy_attachment.libsonnet'),
  pinpoint_adm_channel: (import 'pinpoint_adm_channel.libsonnet'),
  pinpoint_apns_channel: (import 'pinpoint_apns_channel.libsonnet'),
  pinpoint_apns_sandbox_channel: (import 'pinpoint_apns_sandbox_channel.libsonnet'),
  pinpoint_apns_voip_channel: (import 'pinpoint_apns_voip_channel.libsonnet'),
  pinpoint_apns_voip_sandbox_channel: (import 'pinpoint_apns_voip_sandbox_channel.libsonnet'),
  pinpoint_app: (import 'pinpoint_app.libsonnet'),
  pinpoint_baidu_channel: (import 'pinpoint_baidu_channel.libsonnet'),
  pinpoint_email_channel: (import 'pinpoint_email_channel.libsonnet'),
  pinpoint_event_stream: (import 'pinpoint_event_stream.libsonnet'),
  pinpoint_gcm_channel: (import 'pinpoint_gcm_channel.libsonnet'),
  pinpoint_sms_channel: (import 'pinpoint_sms_channel.libsonnet'),
  placement_group: (import 'placement_group.libsonnet'),
  prometheus_alert_manager_definition: (import 'prometheus_alert_manager_definition.libsonnet'),
  prometheus_rule_group_namespace: (import 'prometheus_rule_group_namespace.libsonnet'),
  prometheus_workspace: (import 'prometheus_workspace.libsonnet'),
  proxy_protocol_policy: (import 'proxy_protocol_policy.libsonnet'),
  qldb_ledger: (import 'qldb_ledger.libsonnet'),
  qldb_stream: (import 'qldb_stream.libsonnet'),
  quicksight_data_source: (import 'quicksight_data_source.libsonnet'),
  quicksight_group: (import 'quicksight_group.libsonnet'),
  quicksight_group_membership: (import 'quicksight_group_membership.libsonnet'),
  quicksight_user: (import 'quicksight_user.libsonnet'),
  ram_principal_association: (import 'ram_principal_association.libsonnet'),
  ram_resource_association: (import 'ram_resource_association.libsonnet'),
  ram_resource_share: (import 'ram_resource_share.libsonnet'),
  ram_resource_share_accepter: (import 'ram_resource_share_accepter.libsonnet'),
  rds_cluster: (import 'rds_cluster.libsonnet'),
  rds_cluster_activity_stream: (import 'rds_cluster_activity_stream.libsonnet'),
  rds_cluster_endpoint: (import 'rds_cluster_endpoint.libsonnet'),
  rds_cluster_instance: (import 'rds_cluster_instance.libsonnet'),
  rds_cluster_parameter_group: (import 'rds_cluster_parameter_group.libsonnet'),
  rds_cluster_role_association: (import 'rds_cluster_role_association.libsonnet'),
  rds_global_cluster: (import 'rds_global_cluster.libsonnet'),
  rds_reserved_instance: (import 'rds_reserved_instance.libsonnet'),
  redshift_authentication_profile: (import 'redshift_authentication_profile.libsonnet'),
  redshift_cluster: (import 'redshift_cluster.libsonnet'),
  redshift_cluster_iam_roles: (import 'redshift_cluster_iam_roles.libsonnet'),
  redshift_endpoint_access: (import 'redshift_endpoint_access.libsonnet'),
  redshift_endpoint_authorization: (import 'redshift_endpoint_authorization.libsonnet'),
  redshift_event_subscription: (import 'redshift_event_subscription.libsonnet'),
  redshift_hsm_client_certificate: (import 'redshift_hsm_client_certificate.libsonnet'),
  redshift_hsm_configuration: (import 'redshift_hsm_configuration.libsonnet'),
  redshift_parameter_group: (import 'redshift_parameter_group.libsonnet'),
  redshift_partner: (import 'redshift_partner.libsonnet'),
  redshift_scheduled_action: (import 'redshift_scheduled_action.libsonnet'),
  redshift_security_group: (import 'redshift_security_group.libsonnet'),
  redshift_snapshot_copy_grant: (import 'redshift_snapshot_copy_grant.libsonnet'),
  redshift_snapshot_schedule: (import 'redshift_snapshot_schedule.libsonnet'),
  redshift_snapshot_schedule_association: (import 'redshift_snapshot_schedule_association.libsonnet'),
  redshift_subnet_group: (import 'redshift_subnet_group.libsonnet'),
  redshift_usage_limit: (import 'redshift_usage_limit.libsonnet'),
  redshiftdata_statement: (import 'redshiftdata_statement.libsonnet'),
  redshiftserverless_endpoint_access: (import 'redshiftserverless_endpoint_access.libsonnet'),
  redshiftserverless_namespace: (import 'redshiftserverless_namespace.libsonnet'),
  redshiftserverless_resource_policy: (import 'redshiftserverless_resource_policy.libsonnet'),
  redshiftserverless_snapshot: (import 'redshiftserverless_snapshot.libsonnet'),
  redshiftserverless_usage_limit: (import 'redshiftserverless_usage_limit.libsonnet'),
  redshiftserverless_workgroup: (import 'redshiftserverless_workgroup.libsonnet'),
  resourceexplorer2_index: (import 'resourceexplorer2_index.libsonnet'),
  resourcegroups_group: (import 'resourcegroups_group.libsonnet'),
  rolesanywhere_profile: (import 'rolesanywhere_profile.libsonnet'),
  rolesanywhere_trust_anchor: (import 'rolesanywhere_trust_anchor.libsonnet'),
  route: (import 'route.libsonnet'),
  route53_delegation_set: (import 'route53_delegation_set.libsonnet'),
  route53_health_check: (import 'route53_health_check.libsonnet'),
  route53_hosted_zone_dnssec: (import 'route53_hosted_zone_dnssec.libsonnet'),
  route53_key_signing_key: (import 'route53_key_signing_key.libsonnet'),
  route53_query_log: (import 'route53_query_log.libsonnet'),
  route53_record: (import 'route53_record.libsonnet'),
  route53_resolver_config: (import 'route53_resolver_config.libsonnet'),
  route53_resolver_dnssec_config: (import 'route53_resolver_dnssec_config.libsonnet'),
  route53_resolver_endpoint: (import 'route53_resolver_endpoint.libsonnet'),
  route53_resolver_firewall_config: (import 'route53_resolver_firewall_config.libsonnet'),
  route53_resolver_firewall_domain_list: (import 'route53_resolver_firewall_domain_list.libsonnet'),
  route53_resolver_firewall_rule: (import 'route53_resolver_firewall_rule.libsonnet'),
  route53_resolver_firewall_rule_group: (import 'route53_resolver_firewall_rule_group.libsonnet'),
  route53_resolver_firewall_rule_group_association: (import 'route53_resolver_firewall_rule_group_association.libsonnet'),
  route53_resolver_query_log_config: (import 'route53_resolver_query_log_config.libsonnet'),
  route53_resolver_query_log_config_association: (import 'route53_resolver_query_log_config_association.libsonnet'),
  route53_resolver_rule: (import 'route53_resolver_rule.libsonnet'),
  route53_resolver_rule_association: (import 'route53_resolver_rule_association.libsonnet'),
  route53_traffic_policy: (import 'route53_traffic_policy.libsonnet'),
  route53_traffic_policy_instance: (import 'route53_traffic_policy_instance.libsonnet'),
  route53_vpc_association_authorization: (import 'route53_vpc_association_authorization.libsonnet'),
  route53_zone: (import 'route53_zone.libsonnet'),
  route53_zone_association: (import 'route53_zone_association.libsonnet'),
  route53domains_registered_domain: (import 'route53domains_registered_domain.libsonnet'),
  route53recoverycontrolconfig_cluster: (import 'route53recoverycontrolconfig_cluster.libsonnet'),
  route53recoverycontrolconfig_control_panel: (import 'route53recoverycontrolconfig_control_panel.libsonnet'),
  route53recoverycontrolconfig_routing_control: (import 'route53recoverycontrolconfig_routing_control.libsonnet'),
  route53recoverycontrolconfig_safety_rule: (import 'route53recoverycontrolconfig_safety_rule.libsonnet'),
  route53recoveryreadiness_cell: (import 'route53recoveryreadiness_cell.libsonnet'),
  route53recoveryreadiness_readiness_check: (import 'route53recoveryreadiness_readiness_check.libsonnet'),
  route53recoveryreadiness_recovery_group: (import 'route53recoveryreadiness_recovery_group.libsonnet'),
  route53recoveryreadiness_resource_set: (import 'route53recoveryreadiness_resource_set.libsonnet'),
  route_table: (import 'route_table.libsonnet'),
  route_table_association: (import 'route_table_association.libsonnet'),
  rum_app_monitor: (import 'rum_app_monitor.libsonnet'),
  rum_metrics_destination: (import 'rum_metrics_destination.libsonnet'),
  s3_access_point: (import 's3_access_point.libsonnet'),
  s3_account_public_access_block: (import 's3_account_public_access_block.libsonnet'),
  s3_bucket: (import 's3_bucket.libsonnet'),
  s3_bucket_accelerate_configuration: (import 's3_bucket_accelerate_configuration.libsonnet'),
  s3_bucket_acl: (import 's3_bucket_acl.libsonnet'),
  s3_bucket_analytics_configuration: (import 's3_bucket_analytics_configuration.libsonnet'),
  s3_bucket_cors_configuration: (import 's3_bucket_cors_configuration.libsonnet'),
  s3_bucket_intelligent_tiering_configuration: (import 's3_bucket_intelligent_tiering_configuration.libsonnet'),
  s3_bucket_inventory: (import 's3_bucket_inventory.libsonnet'),
  s3_bucket_lifecycle_configuration: (import 's3_bucket_lifecycle_configuration.libsonnet'),
  s3_bucket_logging: (import 's3_bucket_logging.libsonnet'),
  s3_bucket_metric: (import 's3_bucket_metric.libsonnet'),
  s3_bucket_notification: (import 's3_bucket_notification.libsonnet'),
  s3_bucket_object: (import 's3_bucket_object.libsonnet'),
  s3_bucket_object_lock_configuration: (import 's3_bucket_object_lock_configuration.libsonnet'),
  s3_bucket_ownership_controls: (import 's3_bucket_ownership_controls.libsonnet'),
  s3_bucket_policy: (import 's3_bucket_policy.libsonnet'),
  s3_bucket_public_access_block: (import 's3_bucket_public_access_block.libsonnet'),
  s3_bucket_replication_configuration: (import 's3_bucket_replication_configuration.libsonnet'),
  s3_bucket_request_payment_configuration: (import 's3_bucket_request_payment_configuration.libsonnet'),
  s3_bucket_server_side_encryption_configuration: (import 's3_bucket_server_side_encryption_configuration.libsonnet'),
  s3_bucket_versioning: (import 's3_bucket_versioning.libsonnet'),
  s3_bucket_website_configuration: (import 's3_bucket_website_configuration.libsonnet'),
  s3_object: (import 's3_object.libsonnet'),
  s3_object_copy: (import 's3_object_copy.libsonnet'),
  s3control_access_point_policy: (import 's3control_access_point_policy.libsonnet'),
  s3control_bucket: (import 's3control_bucket.libsonnet'),
  s3control_bucket_lifecycle_configuration: (import 's3control_bucket_lifecycle_configuration.libsonnet'),
  s3control_bucket_policy: (import 's3control_bucket_policy.libsonnet'),
  s3control_multi_region_access_point: (import 's3control_multi_region_access_point.libsonnet'),
  s3control_multi_region_access_point_policy: (import 's3control_multi_region_access_point_policy.libsonnet'),
  s3control_object_lambda_access_point: (import 's3control_object_lambda_access_point.libsonnet'),
  s3control_object_lambda_access_point_policy: (import 's3control_object_lambda_access_point_policy.libsonnet'),
  s3control_storage_lens_configuration: (import 's3control_storage_lens_configuration.libsonnet'),
  s3outposts_endpoint: (import 's3outposts_endpoint.libsonnet'),
  sagemaker_app: (import 'sagemaker_app.libsonnet'),
  sagemaker_app_image_config: (import 'sagemaker_app_image_config.libsonnet'),
  sagemaker_code_repository: (import 'sagemaker_code_repository.libsonnet'),
  sagemaker_device: (import 'sagemaker_device.libsonnet'),
  sagemaker_device_fleet: (import 'sagemaker_device_fleet.libsonnet'),
  sagemaker_domain: (import 'sagemaker_domain.libsonnet'),
  sagemaker_endpoint: (import 'sagemaker_endpoint.libsonnet'),
  sagemaker_endpoint_configuration: (import 'sagemaker_endpoint_configuration.libsonnet'),
  sagemaker_feature_group: (import 'sagemaker_feature_group.libsonnet'),
  sagemaker_flow_definition: (import 'sagemaker_flow_definition.libsonnet'),
  sagemaker_human_task_ui: (import 'sagemaker_human_task_ui.libsonnet'),
  sagemaker_image: (import 'sagemaker_image.libsonnet'),
  sagemaker_image_version: (import 'sagemaker_image_version.libsonnet'),
  sagemaker_model: (import 'sagemaker_model.libsonnet'),
  sagemaker_model_package_group: (import 'sagemaker_model_package_group.libsonnet'),
  sagemaker_model_package_group_policy: (import 'sagemaker_model_package_group_policy.libsonnet'),
  sagemaker_notebook_instance: (import 'sagemaker_notebook_instance.libsonnet'),
  sagemaker_notebook_instance_lifecycle_configuration: (import 'sagemaker_notebook_instance_lifecycle_configuration.libsonnet'),
  sagemaker_project: (import 'sagemaker_project.libsonnet'),
  sagemaker_servicecatalog_portfolio_status: (import 'sagemaker_servicecatalog_portfolio_status.libsonnet'),
  sagemaker_space: (import 'sagemaker_space.libsonnet'),
  sagemaker_studio_lifecycle_config: (import 'sagemaker_studio_lifecycle_config.libsonnet'),
  sagemaker_user_profile: (import 'sagemaker_user_profile.libsonnet'),
  sagemaker_workforce: (import 'sagemaker_workforce.libsonnet'),
  sagemaker_workteam: (import 'sagemaker_workteam.libsonnet'),
  scheduler_schedule: (import 'scheduler_schedule.libsonnet'),
  scheduler_schedule_group: (import 'scheduler_schedule_group.libsonnet'),
  schemas_discoverer: (import 'schemas_discoverer.libsonnet'),
  schemas_registry: (import 'schemas_registry.libsonnet'),
  schemas_registry_policy: (import 'schemas_registry_policy.libsonnet'),
  schemas_schema: (import 'schemas_schema.libsonnet'),
  secretsmanager_secret: (import 'secretsmanager_secret.libsonnet'),
  secretsmanager_secret_policy: (import 'secretsmanager_secret_policy.libsonnet'),
  secretsmanager_secret_rotation: (import 'secretsmanager_secret_rotation.libsonnet'),
  secretsmanager_secret_version: (import 'secretsmanager_secret_version.libsonnet'),
  security_group: (import 'security_group.libsonnet'),
  security_group_rule: (import 'security_group_rule.libsonnet'),
  securityhub_account: (import 'securityhub_account.libsonnet'),
  securityhub_action_target: (import 'securityhub_action_target.libsonnet'),
  securityhub_finding_aggregator: (import 'securityhub_finding_aggregator.libsonnet'),
  securityhub_insight: (import 'securityhub_insight.libsonnet'),
  securityhub_invite_accepter: (import 'securityhub_invite_accepter.libsonnet'),
  securityhub_member: (import 'securityhub_member.libsonnet'),
  securityhub_organization_admin_account: (import 'securityhub_organization_admin_account.libsonnet'),
  securityhub_organization_configuration: (import 'securityhub_organization_configuration.libsonnet'),
  securityhub_product_subscription: (import 'securityhub_product_subscription.libsonnet'),
  securityhub_standards_control: (import 'securityhub_standards_control.libsonnet'),
  securityhub_standards_subscription: (import 'securityhub_standards_subscription.libsonnet'),
  serverlessapplicationrepository_cloudformation_stack: (import 'serverlessapplicationrepository_cloudformation_stack.libsonnet'),
  service_discovery_http_namespace: (import 'service_discovery_http_namespace.libsonnet'),
  service_discovery_instance: (import 'service_discovery_instance.libsonnet'),
  service_discovery_private_dns_namespace: (import 'service_discovery_private_dns_namespace.libsonnet'),
  service_discovery_public_dns_namespace: (import 'service_discovery_public_dns_namespace.libsonnet'),
  service_discovery_service: (import 'service_discovery_service.libsonnet'),
  servicecatalog_budget_resource_association: (import 'servicecatalog_budget_resource_association.libsonnet'),
  servicecatalog_constraint: (import 'servicecatalog_constraint.libsonnet'),
  servicecatalog_organizations_access: (import 'servicecatalog_organizations_access.libsonnet'),
  servicecatalog_portfolio: (import 'servicecatalog_portfolio.libsonnet'),
  servicecatalog_portfolio_share: (import 'servicecatalog_portfolio_share.libsonnet'),
  servicecatalog_principal_portfolio_association: (import 'servicecatalog_principal_portfolio_association.libsonnet'),
  servicecatalog_product: (import 'servicecatalog_product.libsonnet'),
  servicecatalog_product_portfolio_association: (import 'servicecatalog_product_portfolio_association.libsonnet'),
  servicecatalog_provisioned_product: (import 'servicecatalog_provisioned_product.libsonnet'),
  servicecatalog_provisioning_artifact: (import 'servicecatalog_provisioning_artifact.libsonnet'),
  servicecatalog_service_action: (import 'servicecatalog_service_action.libsonnet'),
  servicecatalog_tag_option: (import 'servicecatalog_tag_option.libsonnet'),
  servicecatalog_tag_option_resource_association: (import 'servicecatalog_tag_option_resource_association.libsonnet'),
  servicequotas_service_quota: (import 'servicequotas_service_quota.libsonnet'),
  ses_active_receipt_rule_set: (import 'ses_active_receipt_rule_set.libsonnet'),
  ses_configuration_set: (import 'ses_configuration_set.libsonnet'),
  ses_domain_dkim: (import 'ses_domain_dkim.libsonnet'),
  ses_domain_identity: (import 'ses_domain_identity.libsonnet'),
  ses_domain_identity_verification: (import 'ses_domain_identity_verification.libsonnet'),
  ses_domain_mail_from: (import 'ses_domain_mail_from.libsonnet'),
  ses_email_identity: (import 'ses_email_identity.libsonnet'),
  ses_event_destination: (import 'ses_event_destination.libsonnet'),
  ses_identity_notification_topic: (import 'ses_identity_notification_topic.libsonnet'),
  ses_identity_policy: (import 'ses_identity_policy.libsonnet'),
  ses_receipt_filter: (import 'ses_receipt_filter.libsonnet'),
  ses_receipt_rule: (import 'ses_receipt_rule.libsonnet'),
  ses_receipt_rule_set: (import 'ses_receipt_rule_set.libsonnet'),
  ses_template: (import 'ses_template.libsonnet'),
  sesv2_configuration_set: (import 'sesv2_configuration_set.libsonnet'),
  sesv2_dedicated_ip_assignment: (import 'sesv2_dedicated_ip_assignment.libsonnet'),
  sesv2_dedicated_ip_pool: (import 'sesv2_dedicated_ip_pool.libsonnet'),
  sesv2_email_identity: (import 'sesv2_email_identity.libsonnet'),
  sesv2_email_identity_feedback_attributes: (import 'sesv2_email_identity_feedback_attributes.libsonnet'),
  sesv2_email_identity_mail_from_attributes: (import 'sesv2_email_identity_mail_from_attributes.libsonnet'),
  sfn_activity: (import 'sfn_activity.libsonnet'),
  sfn_state_machine: (import 'sfn_state_machine.libsonnet'),
  shield_protection: (import 'shield_protection.libsonnet'),
  shield_protection_group: (import 'shield_protection_group.libsonnet'),
  shield_protection_health_check_association: (import 'shield_protection_health_check_association.libsonnet'),
  signer_signing_job: (import 'signer_signing_job.libsonnet'),
  signer_signing_profile: (import 'signer_signing_profile.libsonnet'),
  signer_signing_profile_permission: (import 'signer_signing_profile_permission.libsonnet'),
  simpledb_domain: (import 'simpledb_domain.libsonnet'),
  snapshot_create_volume_permission: (import 'snapshot_create_volume_permission.libsonnet'),
  sns_platform_application: (import 'sns_platform_application.libsonnet'),
  sns_sms_preferences: (import 'sns_sms_preferences.libsonnet'),
  sns_topic: (import 'sns_topic.libsonnet'),
  sns_topic_policy: (import 'sns_topic_policy.libsonnet'),
  sns_topic_subscription: (import 'sns_topic_subscription.libsonnet'),
  spot_datafeed_subscription: (import 'spot_datafeed_subscription.libsonnet'),
  spot_fleet_request: (import 'spot_fleet_request.libsonnet'),
  spot_instance_request: (import 'spot_instance_request.libsonnet'),
  sqs_queue: (import 'sqs_queue.libsonnet'),
  sqs_queue_policy: (import 'sqs_queue_policy.libsonnet'),
  sqs_queue_redrive_allow_policy: (import 'sqs_queue_redrive_allow_policy.libsonnet'),
  sqs_queue_redrive_policy: (import 'sqs_queue_redrive_policy.libsonnet'),
  ssm_activation: (import 'ssm_activation.libsonnet'),
  ssm_association: (import 'ssm_association.libsonnet'),
  ssm_default_patch_baseline: (import 'ssm_default_patch_baseline.libsonnet'),
  ssm_document: (import 'ssm_document.libsonnet'),
  ssm_maintenance_window: (import 'ssm_maintenance_window.libsonnet'),
  ssm_maintenance_window_target: (import 'ssm_maintenance_window_target.libsonnet'),
  ssm_maintenance_window_task: (import 'ssm_maintenance_window_task.libsonnet'),
  ssm_parameter: (import 'ssm_parameter.libsonnet'),
  ssm_patch_baseline: (import 'ssm_patch_baseline.libsonnet'),
  ssm_patch_group: (import 'ssm_patch_group.libsonnet'),
  ssm_resource_data_sync: (import 'ssm_resource_data_sync.libsonnet'),
  ssm_service_setting: (import 'ssm_service_setting.libsonnet'),
  ssoadmin_account_assignment: (import 'ssoadmin_account_assignment.libsonnet'),
  ssoadmin_customer_managed_policy_attachment: (import 'ssoadmin_customer_managed_policy_attachment.libsonnet'),
  ssoadmin_managed_policy_attachment: (import 'ssoadmin_managed_policy_attachment.libsonnet'),
  ssoadmin_permission_set: (import 'ssoadmin_permission_set.libsonnet'),
  ssoadmin_permission_set_inline_policy: (import 'ssoadmin_permission_set_inline_policy.libsonnet'),
  ssoadmin_permissions_boundary_attachment: (import 'ssoadmin_permissions_boundary_attachment.libsonnet'),
  storagegateway_cache: (import 'storagegateway_cache.libsonnet'),
  storagegateway_cached_iscsi_volume: (import 'storagegateway_cached_iscsi_volume.libsonnet'),
  storagegateway_file_system_association: (import 'storagegateway_file_system_association.libsonnet'),
  storagegateway_gateway: (import 'storagegateway_gateway.libsonnet'),
  storagegateway_nfs_file_share: (import 'storagegateway_nfs_file_share.libsonnet'),
  storagegateway_smb_file_share: (import 'storagegateway_smb_file_share.libsonnet'),
  storagegateway_stored_iscsi_volume: (import 'storagegateway_stored_iscsi_volume.libsonnet'),
  storagegateway_tape_pool: (import 'storagegateway_tape_pool.libsonnet'),
  storagegateway_upload_buffer: (import 'storagegateway_upload_buffer.libsonnet'),
  storagegateway_working_storage: (import 'storagegateway_working_storage.libsonnet'),
  subnet: (import 'subnet.libsonnet'),
  swf_domain: (import 'swf_domain.libsonnet'),
  synthetics_canary: (import 'synthetics_canary.libsonnet'),
  timestreamwrite_database: (import 'timestreamwrite_database.libsonnet'),
  timestreamwrite_table: (import 'timestreamwrite_table.libsonnet'),
  transcribe_language_model: (import 'transcribe_language_model.libsonnet'),
  transcribe_medical_vocabulary: (import 'transcribe_medical_vocabulary.libsonnet'),
  transcribe_vocabulary: (import 'transcribe_vocabulary.libsonnet'),
  transcribe_vocabulary_filter: (import 'transcribe_vocabulary_filter.libsonnet'),
  transfer_access: (import 'transfer_access.libsonnet'),
  transfer_server: (import 'transfer_server.libsonnet'),
  transfer_ssh_key: (import 'transfer_ssh_key.libsonnet'),
  transfer_tag: (import 'transfer_tag.libsonnet'),
  transfer_user: (import 'transfer_user.libsonnet'),
  transfer_workflow: (import 'transfer_workflow.libsonnet'),
  volume_attachment: (import 'volume_attachment.libsonnet'),
  vpc: (import 'vpc.libsonnet'),
  vpc_dhcp_options: (import 'vpc_dhcp_options.libsonnet'),
  vpc_dhcp_options_association: (import 'vpc_dhcp_options_association.libsonnet'),
  vpc_endpoint: (import 'vpc_endpoint.libsonnet'),
  vpc_endpoint_connection_accepter: (import 'vpc_endpoint_connection_accepter.libsonnet'),
  vpc_endpoint_connection_notification: (import 'vpc_endpoint_connection_notification.libsonnet'),
  vpc_endpoint_policy: (import 'vpc_endpoint_policy.libsonnet'),
  vpc_endpoint_route_table_association: (import 'vpc_endpoint_route_table_association.libsonnet'),
  vpc_endpoint_security_group_association: (import 'vpc_endpoint_security_group_association.libsonnet'),
  vpc_endpoint_service: (import 'vpc_endpoint_service.libsonnet'),
  vpc_endpoint_service_allowed_principal: (import 'vpc_endpoint_service_allowed_principal.libsonnet'),
  vpc_endpoint_subnet_association: (import 'vpc_endpoint_subnet_association.libsonnet'),
  vpc_ipam: (import 'vpc_ipam.libsonnet'),
  vpc_ipam_organization_admin_account: (import 'vpc_ipam_organization_admin_account.libsonnet'),
  vpc_ipam_pool: (import 'vpc_ipam_pool.libsonnet'),
  vpc_ipam_pool_cidr: (import 'vpc_ipam_pool_cidr.libsonnet'),
  vpc_ipam_pool_cidr_allocation: (import 'vpc_ipam_pool_cidr_allocation.libsonnet'),
  vpc_ipam_preview_next_cidr: (import 'vpc_ipam_preview_next_cidr.libsonnet'),
  vpc_ipam_scope: (import 'vpc_ipam_scope.libsonnet'),
  vpc_ipv4_cidr_block_association: (import 'vpc_ipv4_cidr_block_association.libsonnet'),
  vpc_ipv6_cidr_block_association: (import 'vpc_ipv6_cidr_block_association.libsonnet'),
  vpc_network_performance_metric_subscription: (import 'vpc_network_performance_metric_subscription.libsonnet'),
  vpc_peering_connection: (import 'vpc_peering_connection.libsonnet'),
  vpc_peering_connection_accepter: (import 'vpc_peering_connection_accepter.libsonnet'),
  vpc_peering_connection_options: (import 'vpc_peering_connection_options.libsonnet'),
  vpn_connection: (import 'vpn_connection.libsonnet'),
  vpn_connection_route: (import 'vpn_connection_route.libsonnet'),
  vpn_gateway: (import 'vpn_gateway.libsonnet'),
  vpn_gateway_attachment: (import 'vpn_gateway_attachment.libsonnet'),
  vpn_gateway_route_propagation: (import 'vpn_gateway_route_propagation.libsonnet'),
  waf_byte_match_set: (import 'waf_byte_match_set.libsonnet'),
  waf_geo_match_set: (import 'waf_geo_match_set.libsonnet'),
  waf_ipset: (import 'waf_ipset.libsonnet'),
  waf_rate_based_rule: (import 'waf_rate_based_rule.libsonnet'),
  waf_regex_match_set: (import 'waf_regex_match_set.libsonnet'),
  waf_regex_pattern_set: (import 'waf_regex_pattern_set.libsonnet'),
  waf_rule: (import 'waf_rule.libsonnet'),
  waf_rule_group: (import 'waf_rule_group.libsonnet'),
  waf_size_constraint_set: (import 'waf_size_constraint_set.libsonnet'),
  waf_sql_injection_match_set: (import 'waf_sql_injection_match_set.libsonnet'),
  waf_web_acl: (import 'waf_web_acl.libsonnet'),
  waf_xss_match_set: (import 'waf_xss_match_set.libsonnet'),
  wafregional_byte_match_set: (import 'wafregional_byte_match_set.libsonnet'),
  wafregional_geo_match_set: (import 'wafregional_geo_match_set.libsonnet'),
  wafregional_ipset: (import 'wafregional_ipset.libsonnet'),
  wafregional_rate_based_rule: (import 'wafregional_rate_based_rule.libsonnet'),
  wafregional_regex_match_set: (import 'wafregional_regex_match_set.libsonnet'),
  wafregional_regex_pattern_set: (import 'wafregional_regex_pattern_set.libsonnet'),
  wafregional_rule: (import 'wafregional_rule.libsonnet'),
  wafregional_rule_group: (import 'wafregional_rule_group.libsonnet'),
  wafregional_size_constraint_set: (import 'wafregional_size_constraint_set.libsonnet'),
  wafregional_sql_injection_match_set: (import 'wafregional_sql_injection_match_set.libsonnet'),
  wafregional_web_acl: (import 'wafregional_web_acl.libsonnet'),
  wafregional_web_acl_association: (import 'wafregional_web_acl_association.libsonnet'),
  wafregional_xss_match_set: (import 'wafregional_xss_match_set.libsonnet'),
  wafv2_ip_set: (import 'wafv2_ip_set.libsonnet'),
  wafv2_regex_pattern_set: (import 'wafv2_regex_pattern_set.libsonnet'),
  wafv2_rule_group: (import 'wafv2_rule_group.libsonnet'),
  wafv2_web_acl: (import 'wafv2_web_acl.libsonnet'),
  wafv2_web_acl_association: (import 'wafv2_web_acl_association.libsonnet'),
  wafv2_web_acl_logging_configuration: (import 'wafv2_web_acl_logging_configuration.libsonnet'),
  worklink_fleet: (import 'worklink_fleet.libsonnet'),
  worklink_website_certificate_authority_association: (import 'worklink_website_certificate_authority_association.libsonnet'),
  workspaces_directory: (import 'workspaces_directory.libsonnet'),
  workspaces_ip_group: (import 'workspaces_ip_group.libsonnet'),
  workspaces_workspace: (import 'workspaces_workspace.libsonnet'),
  xray_encryption_config: (import 'xray_encryption_config.libsonnet'),
  xray_group: (import 'xray_group.libsonnet'),
  xray_sampling_rule: (import 'xray_sampling_rule.libsonnet'),
}
