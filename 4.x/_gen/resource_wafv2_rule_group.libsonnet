local tf = (import 'github.com/tf-libsonnet/core/main.libsonnet');
{
  custom_response_body:: {
    new(
      content,
      content_type,
      key
    ):: std.prune(a={
      content: content,
      content_type: content_type,
      key: key,
    }),
  },
  new(
    resourceLabel,
    capacity,
    name,
    scope,
    custom_response_body=null,
    description=null,
    rule=null,
    tags=null,
    tags_all=null,
    visibility_config=null,
    _meta={}
  ):: tf.withResource(
    type='aws_wafv2_rule_group',
    label=resourceLabel,
    attrs=self.newAttrs(
      capacity=capacity,
      custom_response_body=custom_response_body,
      description=description,
      name=name,
      rule=rule,
      scope=scope,
      tags=tags,
      tags_all=tags_all,
      visibility_config=visibility_config
    ),
    _meta=_meta
  ),
  newAttrs(
    capacity,
    name,
    scope,
    custom_response_body=null,
    description=null,
    rule=null,
    tags=null,
    tags_all=null,
    visibility_config=null
  ):: std.prune(a={
    capacity: capacity,
    custom_response_body: custom_response_body,
    description: description,
    name: name,
    rule: rule,
    scope: scope,
    tags: tags,
    tags_all: tags_all,
    visibility_config: visibility_config,
  }),
  rule:: {
    action:: {
      allow:: {
        custom_request_handling:: {
          insert_header:: {
            new(
              name,
              value
            ):: std.prune(a={
              name: name,
              value: value,
            }),
          },
          new(
            insert_header=null
          ):: std.prune(a={
            insert_header: insert_header,
          }),
        },
        new(
          custom_request_handling=null
        ):: std.prune(a={
          custom_request_handling: custom_request_handling,
        }),
      },
      block:: {
        custom_response:: {
          new(
            response_code,
            custom_response_body_key=null,
            response_header=null
          ):: std.prune(a={
            custom_response_body_key: custom_response_body_key,
            response_code: response_code,
            response_header: response_header,
          }),
          response_header:: {
            new(
              name,
              value
            ):: std.prune(a={
              name: name,
              value: value,
            }),
          },
        },
        new(
          custom_response=null
        ):: std.prune(a={
          custom_response: custom_response,
        }),
      },
      count:: {
        custom_request_handling:: {
          insert_header:: {
            new(
              name,
              value
            ):: std.prune(a={
              name: name,
              value: value,
            }),
          },
          new(
            insert_header=null
          ):: std.prune(a={
            insert_header: insert_header,
          }),
        },
        new(
          custom_request_handling=null
        ):: std.prune(a={
          custom_request_handling: custom_request_handling,
        }),
      },
      new(
        allow=null,
        block=null,
        count=null
      ):: std.prune(a={
        allow: allow,
        block: block,
        count: count,
      }),
    },
    new(
      name,
      priority,
      action=null,
      rule_label=null,
      statement=null,
      visibility_config=null
    ):: std.prune(a={
      action: action,
      name: name,
      priority: priority,
      rule_label: rule_label,
      statement: statement,
      visibility_config: visibility_config,
    }),
    rule_label:: {
      new(
        name
      ):: std.prune(a={
        name: name,
      }),
    },
    statement:: {
      and_statement:: {
        new(
          statement=null
        ):: std.prune(a={
          statement: statement,
        }),
        statement:: {
          and_statement:: {
            new(
              statement=null
            ):: std.prune(a={
              statement: statement,
            }),
            statement:: {
              and_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              byte_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  positional_constraint,
                  search_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  positional_constraint: positional_constraint,
                  search_string: search_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              geo_match_statement:: {
                forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                  }),
                },
                new(
                  country_codes,
                  forwarded_ip_config=null
                ):: std.prune(a={
                  country_codes: country_codes,
                  forwarded_ip_config: forwarded_ip_config,
                }),
              },
              ip_set_reference_statement:: {
                ip_set_forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name,
                    position
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                    position: position,
                  }),
                },
                new(
                  arn,
                  ip_set_forwarded_ip_config=null
                ):: std.prune(a={
                  arn: arn,
                  ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                }),
              },
              label_match_statement:: {
                new(
                  key,
                  scope
                ):: std.prune(a={
                  key: key,
                  scope: scope,
                }),
              },
              new(
                and_statement=null,
                byte_match_statement=null,
                geo_match_statement=null,
                ip_set_reference_statement=null,
                label_match_statement=null,
                not_statement=null,
                or_statement=null,
                regex_match_statement=null,
                regex_pattern_set_reference_statement=null,
                size_constraint_statement=null,
                sqli_match_statement=null,
                xss_match_statement=null
              ):: std.prune(a={
                and_statement: and_statement,
                byte_match_statement: byte_match_statement,
                geo_match_statement: geo_match_statement,
                ip_set_reference_statement: ip_set_reference_statement,
                label_match_statement: label_match_statement,
                not_statement: not_statement,
                or_statement: or_statement,
                regex_match_statement: regex_match_statement,
                regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                size_constraint_statement: size_constraint_statement,
                sqli_match_statement: sqli_match_statement,
                xss_match_statement: xss_match_statement,
              }),
              not_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              or_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              regex_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  regex_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  regex_string: regex_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              regex_pattern_set_reference_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  arn,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  arn: arn,
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              size_constraint_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  comparison_operator,
                  size,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  comparison_operator: comparison_operator,
                  field_to_match: field_to_match,
                  size: size,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              sqli_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              xss_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
            },
          },
          byte_match_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              positional_constraint,
              search_string,
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              field_to_match: field_to_match,
              positional_constraint: positional_constraint,
              search_string: search_string,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          geo_match_statement:: {
            forwarded_ip_config:: {
              new(
                fallback_behavior,
                header_name
              ):: std.prune(a={
                fallback_behavior: fallback_behavior,
                header_name: header_name,
              }),
            },
            new(
              country_codes,
              forwarded_ip_config=null
            ):: std.prune(a={
              country_codes: country_codes,
              forwarded_ip_config: forwarded_ip_config,
            }),
          },
          ip_set_reference_statement:: {
            ip_set_forwarded_ip_config:: {
              new(
                fallback_behavior,
                header_name,
                position
              ):: std.prune(a={
                fallback_behavior: fallback_behavior,
                header_name: header_name,
                position: position,
              }),
            },
            new(
              arn,
              ip_set_forwarded_ip_config=null
            ):: std.prune(a={
              arn: arn,
              ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
            }),
          },
          label_match_statement:: {
            new(
              key,
              scope
            ):: std.prune(a={
              key: key,
              scope: scope,
            }),
          },
          new(
            and_statement=null,
            byte_match_statement=null,
            geo_match_statement=null,
            ip_set_reference_statement=null,
            label_match_statement=null,
            not_statement=null,
            or_statement=null,
            regex_match_statement=null,
            regex_pattern_set_reference_statement=null,
            size_constraint_statement=null,
            sqli_match_statement=null,
            xss_match_statement=null
          ):: std.prune(a={
            and_statement: and_statement,
            byte_match_statement: byte_match_statement,
            geo_match_statement: geo_match_statement,
            ip_set_reference_statement: ip_set_reference_statement,
            label_match_statement: label_match_statement,
            not_statement: not_statement,
            or_statement: or_statement,
            regex_match_statement: regex_match_statement,
            regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
            size_constraint_statement: size_constraint_statement,
            sqli_match_statement: sqli_match_statement,
            xss_match_statement: xss_match_statement,
          }),
          not_statement:: {
            new(
              statement=null
            ):: std.prune(a={
              statement: statement,
            }),
            statement:: {
              and_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              byte_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  positional_constraint,
                  search_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  positional_constraint: positional_constraint,
                  search_string: search_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              geo_match_statement:: {
                forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                  }),
                },
                new(
                  country_codes,
                  forwarded_ip_config=null
                ):: std.prune(a={
                  country_codes: country_codes,
                  forwarded_ip_config: forwarded_ip_config,
                }),
              },
              ip_set_reference_statement:: {
                ip_set_forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name,
                    position
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                    position: position,
                  }),
                },
                new(
                  arn,
                  ip_set_forwarded_ip_config=null
                ):: std.prune(a={
                  arn: arn,
                  ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                }),
              },
              label_match_statement:: {
                new(
                  key,
                  scope
                ):: std.prune(a={
                  key: key,
                  scope: scope,
                }),
              },
              new(
                and_statement=null,
                byte_match_statement=null,
                geo_match_statement=null,
                ip_set_reference_statement=null,
                label_match_statement=null,
                not_statement=null,
                or_statement=null,
                regex_match_statement=null,
                regex_pattern_set_reference_statement=null,
                size_constraint_statement=null,
                sqli_match_statement=null,
                xss_match_statement=null
              ):: std.prune(a={
                and_statement: and_statement,
                byte_match_statement: byte_match_statement,
                geo_match_statement: geo_match_statement,
                ip_set_reference_statement: ip_set_reference_statement,
                label_match_statement: label_match_statement,
                not_statement: not_statement,
                or_statement: or_statement,
                regex_match_statement: regex_match_statement,
                regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                size_constraint_statement: size_constraint_statement,
                sqli_match_statement: sqli_match_statement,
                xss_match_statement: xss_match_statement,
              }),
              not_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              or_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              regex_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  regex_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  regex_string: regex_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              regex_pattern_set_reference_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  arn,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  arn: arn,
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              size_constraint_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  comparison_operator,
                  size,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  comparison_operator: comparison_operator,
                  field_to_match: field_to_match,
                  size: size,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              sqli_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              xss_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
            },
          },
          or_statement:: {
            new(
              statement=null
            ):: std.prune(a={
              statement: statement,
            }),
            statement:: {
              and_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              byte_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  positional_constraint,
                  search_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  positional_constraint: positional_constraint,
                  search_string: search_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              geo_match_statement:: {
                forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                  }),
                },
                new(
                  country_codes,
                  forwarded_ip_config=null
                ):: std.prune(a={
                  country_codes: country_codes,
                  forwarded_ip_config: forwarded_ip_config,
                }),
              },
              ip_set_reference_statement:: {
                ip_set_forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name,
                    position
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                    position: position,
                  }),
                },
                new(
                  arn,
                  ip_set_forwarded_ip_config=null
                ):: std.prune(a={
                  arn: arn,
                  ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                }),
              },
              label_match_statement:: {
                new(
                  key,
                  scope
                ):: std.prune(a={
                  key: key,
                  scope: scope,
                }),
              },
              new(
                and_statement=null,
                byte_match_statement=null,
                geo_match_statement=null,
                ip_set_reference_statement=null,
                label_match_statement=null,
                not_statement=null,
                or_statement=null,
                regex_match_statement=null,
                regex_pattern_set_reference_statement=null,
                size_constraint_statement=null,
                sqli_match_statement=null,
                xss_match_statement=null
              ):: std.prune(a={
                and_statement: and_statement,
                byte_match_statement: byte_match_statement,
                geo_match_statement: geo_match_statement,
                ip_set_reference_statement: ip_set_reference_statement,
                label_match_statement: label_match_statement,
                not_statement: not_statement,
                or_statement: or_statement,
                regex_match_statement: regex_match_statement,
                regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                size_constraint_statement: size_constraint_statement,
                sqli_match_statement: sqli_match_statement,
                xss_match_statement: xss_match_statement,
              }),
              not_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              or_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              regex_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  regex_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  regex_string: regex_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              regex_pattern_set_reference_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  arn,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  arn: arn,
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              size_constraint_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  comparison_operator,
                  size,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  comparison_operator: comparison_operator,
                  field_to_match: field_to_match,
                  size: size,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              sqli_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              xss_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
            },
          },
          regex_match_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              regex_string,
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              field_to_match: field_to_match,
              regex_string: regex_string,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          regex_pattern_set_reference_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              arn,
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              arn: arn,
              field_to_match: field_to_match,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          size_constraint_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              comparison_operator,
              size,
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              comparison_operator: comparison_operator,
              field_to_match: field_to_match,
              size: size,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          sqli_match_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              field_to_match: field_to_match,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          xss_match_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              field_to_match: field_to_match,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
        },
      },
      byte_match_statement:: {
        field_to_match:: {
          all_query_arguments:: {
            new(

            ):: std.prune(a={}),
          },
          body:: {
            new(

            ):: std.prune(a={}),
          },
          cookies:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                excluded_cookies=null,
                included_cookies=null
              ):: std.prune(a={
                all: all,
                excluded_cookies: excluded_cookies,
                included_cookies: included_cookies,
              }),
            },
            new(
              match_scope,
              oversize_handling,
              match_pattern=null
            ):: std.prune(a={
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          headers:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                excluded_headers=null,
                included_headers=null
              ):: std.prune(a={
                all: all,
                excluded_headers: excluded_headers,
                included_headers: included_headers,
              }),
            },
            new(
              match_scope,
              oversize_handling,
              match_pattern=null
            ):: std.prune(a={
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          json_body:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                included_paths=null
              ):: std.prune(a={
                all: all,
                included_paths: included_paths,
              }),
            },
            new(
              match_scope,
              invalid_fallback_behavior=null,
              match_pattern=null,
              oversize_handling=null
            ):: std.prune(a={
              invalid_fallback_behavior: invalid_fallback_behavior,
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          method:: {
            new(

            ):: std.prune(a={}),
          },
          new(
            all_query_arguments=null,
            body=null,
            cookies=null,
            headers=null,
            json_body=null,
            method=null,
            query_string=null,
            single_header=null,
            single_query_argument=null,
            uri_path=null
          ):: std.prune(a={
            all_query_arguments: all_query_arguments,
            body: body,
            cookies: cookies,
            headers: headers,
            json_body: json_body,
            method: method,
            query_string: query_string,
            single_header: single_header,
            single_query_argument: single_query_argument,
            uri_path: uri_path,
          }),
          query_string:: {
            new(

            ):: std.prune(a={}),
          },
          single_header:: {
            new(
              name
            ):: std.prune(a={
              name: name,
            }),
          },
          single_query_argument:: {
            new(
              name
            ):: std.prune(a={
              name: name,
            }),
          },
          uri_path:: {
            new(

            ):: std.prune(a={}),
          },
        },
        new(
          positional_constraint,
          search_string,
          field_to_match=null,
          text_transformation=null
        ):: std.prune(a={
          field_to_match: field_to_match,
          positional_constraint: positional_constraint,
          search_string: search_string,
          text_transformation: text_transformation,
        }),
        text_transformation:: {
          new(
            priority,
            type
          ):: std.prune(a={
            priority: priority,
            type: type,
          }),
        },
      },
      geo_match_statement:: {
        forwarded_ip_config:: {
          new(
            fallback_behavior,
            header_name
          ):: std.prune(a={
            fallback_behavior: fallback_behavior,
            header_name: header_name,
          }),
        },
        new(
          country_codes,
          forwarded_ip_config=null
        ):: std.prune(a={
          country_codes: country_codes,
          forwarded_ip_config: forwarded_ip_config,
        }),
      },
      ip_set_reference_statement:: {
        ip_set_forwarded_ip_config:: {
          new(
            fallback_behavior,
            header_name,
            position
          ):: std.prune(a={
            fallback_behavior: fallback_behavior,
            header_name: header_name,
            position: position,
          }),
        },
        new(
          arn,
          ip_set_forwarded_ip_config=null
        ):: std.prune(a={
          arn: arn,
          ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
        }),
      },
      label_match_statement:: {
        new(
          key,
          scope
        ):: std.prune(a={
          key: key,
          scope: scope,
        }),
      },
      new(
        and_statement=null,
        byte_match_statement=null,
        geo_match_statement=null,
        ip_set_reference_statement=null,
        label_match_statement=null,
        not_statement=null,
        or_statement=null,
        rate_based_statement=null,
        regex_match_statement=null,
        regex_pattern_set_reference_statement=null,
        size_constraint_statement=null,
        sqli_match_statement=null,
        xss_match_statement=null
      ):: std.prune(a={
        and_statement: and_statement,
        byte_match_statement: byte_match_statement,
        geo_match_statement: geo_match_statement,
        ip_set_reference_statement: ip_set_reference_statement,
        label_match_statement: label_match_statement,
        not_statement: not_statement,
        or_statement: or_statement,
        rate_based_statement: rate_based_statement,
        regex_match_statement: regex_match_statement,
        regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
        size_constraint_statement: size_constraint_statement,
        sqli_match_statement: sqli_match_statement,
        xss_match_statement: xss_match_statement,
      }),
      not_statement:: {
        new(
          statement=null
        ):: std.prune(a={
          statement: statement,
        }),
        statement:: {
          and_statement:: {
            new(
              statement=null
            ):: std.prune(a={
              statement: statement,
            }),
            statement:: {
              and_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              byte_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  positional_constraint,
                  search_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  positional_constraint: positional_constraint,
                  search_string: search_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              geo_match_statement:: {
                forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                  }),
                },
                new(
                  country_codes,
                  forwarded_ip_config=null
                ):: std.prune(a={
                  country_codes: country_codes,
                  forwarded_ip_config: forwarded_ip_config,
                }),
              },
              ip_set_reference_statement:: {
                ip_set_forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name,
                    position
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                    position: position,
                  }),
                },
                new(
                  arn,
                  ip_set_forwarded_ip_config=null
                ):: std.prune(a={
                  arn: arn,
                  ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                }),
              },
              label_match_statement:: {
                new(
                  key,
                  scope
                ):: std.prune(a={
                  key: key,
                  scope: scope,
                }),
              },
              new(
                and_statement=null,
                byte_match_statement=null,
                geo_match_statement=null,
                ip_set_reference_statement=null,
                label_match_statement=null,
                not_statement=null,
                or_statement=null,
                regex_match_statement=null,
                regex_pattern_set_reference_statement=null,
                size_constraint_statement=null,
                sqli_match_statement=null,
                xss_match_statement=null
              ):: std.prune(a={
                and_statement: and_statement,
                byte_match_statement: byte_match_statement,
                geo_match_statement: geo_match_statement,
                ip_set_reference_statement: ip_set_reference_statement,
                label_match_statement: label_match_statement,
                not_statement: not_statement,
                or_statement: or_statement,
                regex_match_statement: regex_match_statement,
                regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                size_constraint_statement: size_constraint_statement,
                sqli_match_statement: sqli_match_statement,
                xss_match_statement: xss_match_statement,
              }),
              not_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              or_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              regex_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  regex_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  regex_string: regex_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              regex_pattern_set_reference_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  arn,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  arn: arn,
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              size_constraint_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  comparison_operator,
                  size,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  comparison_operator: comparison_operator,
                  field_to_match: field_to_match,
                  size: size,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              sqli_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              xss_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
            },
          },
          byte_match_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              positional_constraint,
              search_string,
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              field_to_match: field_to_match,
              positional_constraint: positional_constraint,
              search_string: search_string,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          geo_match_statement:: {
            forwarded_ip_config:: {
              new(
                fallback_behavior,
                header_name
              ):: std.prune(a={
                fallback_behavior: fallback_behavior,
                header_name: header_name,
              }),
            },
            new(
              country_codes,
              forwarded_ip_config=null
            ):: std.prune(a={
              country_codes: country_codes,
              forwarded_ip_config: forwarded_ip_config,
            }),
          },
          ip_set_reference_statement:: {
            ip_set_forwarded_ip_config:: {
              new(
                fallback_behavior,
                header_name,
                position
              ):: std.prune(a={
                fallback_behavior: fallback_behavior,
                header_name: header_name,
                position: position,
              }),
            },
            new(
              arn,
              ip_set_forwarded_ip_config=null
            ):: std.prune(a={
              arn: arn,
              ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
            }),
          },
          label_match_statement:: {
            new(
              key,
              scope
            ):: std.prune(a={
              key: key,
              scope: scope,
            }),
          },
          new(
            and_statement=null,
            byte_match_statement=null,
            geo_match_statement=null,
            ip_set_reference_statement=null,
            label_match_statement=null,
            not_statement=null,
            or_statement=null,
            regex_match_statement=null,
            regex_pattern_set_reference_statement=null,
            size_constraint_statement=null,
            sqli_match_statement=null,
            xss_match_statement=null
          ):: std.prune(a={
            and_statement: and_statement,
            byte_match_statement: byte_match_statement,
            geo_match_statement: geo_match_statement,
            ip_set_reference_statement: ip_set_reference_statement,
            label_match_statement: label_match_statement,
            not_statement: not_statement,
            or_statement: or_statement,
            regex_match_statement: regex_match_statement,
            regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
            size_constraint_statement: size_constraint_statement,
            sqli_match_statement: sqli_match_statement,
            xss_match_statement: xss_match_statement,
          }),
          not_statement:: {
            new(
              statement=null
            ):: std.prune(a={
              statement: statement,
            }),
            statement:: {
              and_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              byte_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  positional_constraint,
                  search_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  positional_constraint: positional_constraint,
                  search_string: search_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              geo_match_statement:: {
                forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                  }),
                },
                new(
                  country_codes,
                  forwarded_ip_config=null
                ):: std.prune(a={
                  country_codes: country_codes,
                  forwarded_ip_config: forwarded_ip_config,
                }),
              },
              ip_set_reference_statement:: {
                ip_set_forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name,
                    position
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                    position: position,
                  }),
                },
                new(
                  arn,
                  ip_set_forwarded_ip_config=null
                ):: std.prune(a={
                  arn: arn,
                  ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                }),
              },
              label_match_statement:: {
                new(
                  key,
                  scope
                ):: std.prune(a={
                  key: key,
                  scope: scope,
                }),
              },
              new(
                and_statement=null,
                byte_match_statement=null,
                geo_match_statement=null,
                ip_set_reference_statement=null,
                label_match_statement=null,
                not_statement=null,
                or_statement=null,
                regex_match_statement=null,
                regex_pattern_set_reference_statement=null,
                size_constraint_statement=null,
                sqli_match_statement=null,
                xss_match_statement=null
              ):: std.prune(a={
                and_statement: and_statement,
                byte_match_statement: byte_match_statement,
                geo_match_statement: geo_match_statement,
                ip_set_reference_statement: ip_set_reference_statement,
                label_match_statement: label_match_statement,
                not_statement: not_statement,
                or_statement: or_statement,
                regex_match_statement: regex_match_statement,
                regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                size_constraint_statement: size_constraint_statement,
                sqli_match_statement: sqli_match_statement,
                xss_match_statement: xss_match_statement,
              }),
              not_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              or_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              regex_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  regex_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  regex_string: regex_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              regex_pattern_set_reference_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  arn,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  arn: arn,
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              size_constraint_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  comparison_operator,
                  size,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  comparison_operator: comparison_operator,
                  field_to_match: field_to_match,
                  size: size,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              sqli_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              xss_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
            },
          },
          or_statement:: {
            new(
              statement=null
            ):: std.prune(a={
              statement: statement,
            }),
            statement:: {
              and_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              byte_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  positional_constraint,
                  search_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  positional_constraint: positional_constraint,
                  search_string: search_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              geo_match_statement:: {
                forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                  }),
                },
                new(
                  country_codes,
                  forwarded_ip_config=null
                ):: std.prune(a={
                  country_codes: country_codes,
                  forwarded_ip_config: forwarded_ip_config,
                }),
              },
              ip_set_reference_statement:: {
                ip_set_forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name,
                    position
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                    position: position,
                  }),
                },
                new(
                  arn,
                  ip_set_forwarded_ip_config=null
                ):: std.prune(a={
                  arn: arn,
                  ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                }),
              },
              label_match_statement:: {
                new(
                  key,
                  scope
                ):: std.prune(a={
                  key: key,
                  scope: scope,
                }),
              },
              new(
                and_statement=null,
                byte_match_statement=null,
                geo_match_statement=null,
                ip_set_reference_statement=null,
                label_match_statement=null,
                not_statement=null,
                or_statement=null,
                regex_match_statement=null,
                regex_pattern_set_reference_statement=null,
                size_constraint_statement=null,
                sqli_match_statement=null,
                xss_match_statement=null
              ):: std.prune(a={
                and_statement: and_statement,
                byte_match_statement: byte_match_statement,
                geo_match_statement: geo_match_statement,
                ip_set_reference_statement: ip_set_reference_statement,
                label_match_statement: label_match_statement,
                not_statement: not_statement,
                or_statement: or_statement,
                regex_match_statement: regex_match_statement,
                regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                size_constraint_statement: size_constraint_statement,
                sqli_match_statement: sqli_match_statement,
                xss_match_statement: xss_match_statement,
              }),
              not_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              or_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              regex_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  regex_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  regex_string: regex_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              regex_pattern_set_reference_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  arn,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  arn: arn,
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              size_constraint_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  comparison_operator,
                  size,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  comparison_operator: comparison_operator,
                  field_to_match: field_to_match,
                  size: size,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              sqli_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              xss_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
            },
          },
          regex_match_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              regex_string,
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              field_to_match: field_to_match,
              regex_string: regex_string,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          regex_pattern_set_reference_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              arn,
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              arn: arn,
              field_to_match: field_to_match,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          size_constraint_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              comparison_operator,
              size,
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              comparison_operator: comparison_operator,
              field_to_match: field_to_match,
              size: size,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          sqli_match_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              field_to_match: field_to_match,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          xss_match_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              field_to_match: field_to_match,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
        },
      },
      or_statement:: {
        new(
          statement=null
        ):: std.prune(a={
          statement: statement,
        }),
        statement:: {
          and_statement:: {
            new(
              statement=null
            ):: std.prune(a={
              statement: statement,
            }),
            statement:: {
              and_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              byte_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  positional_constraint,
                  search_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  positional_constraint: positional_constraint,
                  search_string: search_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              geo_match_statement:: {
                forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                  }),
                },
                new(
                  country_codes,
                  forwarded_ip_config=null
                ):: std.prune(a={
                  country_codes: country_codes,
                  forwarded_ip_config: forwarded_ip_config,
                }),
              },
              ip_set_reference_statement:: {
                ip_set_forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name,
                    position
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                    position: position,
                  }),
                },
                new(
                  arn,
                  ip_set_forwarded_ip_config=null
                ):: std.prune(a={
                  arn: arn,
                  ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                }),
              },
              label_match_statement:: {
                new(
                  key,
                  scope
                ):: std.prune(a={
                  key: key,
                  scope: scope,
                }),
              },
              new(
                and_statement=null,
                byte_match_statement=null,
                geo_match_statement=null,
                ip_set_reference_statement=null,
                label_match_statement=null,
                not_statement=null,
                or_statement=null,
                regex_match_statement=null,
                regex_pattern_set_reference_statement=null,
                size_constraint_statement=null,
                sqli_match_statement=null,
                xss_match_statement=null
              ):: std.prune(a={
                and_statement: and_statement,
                byte_match_statement: byte_match_statement,
                geo_match_statement: geo_match_statement,
                ip_set_reference_statement: ip_set_reference_statement,
                label_match_statement: label_match_statement,
                not_statement: not_statement,
                or_statement: or_statement,
                regex_match_statement: regex_match_statement,
                regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                size_constraint_statement: size_constraint_statement,
                sqli_match_statement: sqli_match_statement,
                xss_match_statement: xss_match_statement,
              }),
              not_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              or_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              regex_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  regex_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  regex_string: regex_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              regex_pattern_set_reference_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  arn,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  arn: arn,
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              size_constraint_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  comparison_operator,
                  size,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  comparison_operator: comparison_operator,
                  field_to_match: field_to_match,
                  size: size,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              sqli_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              xss_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
            },
          },
          byte_match_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              positional_constraint,
              search_string,
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              field_to_match: field_to_match,
              positional_constraint: positional_constraint,
              search_string: search_string,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          geo_match_statement:: {
            forwarded_ip_config:: {
              new(
                fallback_behavior,
                header_name
              ):: std.prune(a={
                fallback_behavior: fallback_behavior,
                header_name: header_name,
              }),
            },
            new(
              country_codes,
              forwarded_ip_config=null
            ):: std.prune(a={
              country_codes: country_codes,
              forwarded_ip_config: forwarded_ip_config,
            }),
          },
          ip_set_reference_statement:: {
            ip_set_forwarded_ip_config:: {
              new(
                fallback_behavior,
                header_name,
                position
              ):: std.prune(a={
                fallback_behavior: fallback_behavior,
                header_name: header_name,
                position: position,
              }),
            },
            new(
              arn,
              ip_set_forwarded_ip_config=null
            ):: std.prune(a={
              arn: arn,
              ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
            }),
          },
          label_match_statement:: {
            new(
              key,
              scope
            ):: std.prune(a={
              key: key,
              scope: scope,
            }),
          },
          new(
            and_statement=null,
            byte_match_statement=null,
            geo_match_statement=null,
            ip_set_reference_statement=null,
            label_match_statement=null,
            not_statement=null,
            or_statement=null,
            regex_match_statement=null,
            regex_pattern_set_reference_statement=null,
            size_constraint_statement=null,
            sqli_match_statement=null,
            xss_match_statement=null
          ):: std.prune(a={
            and_statement: and_statement,
            byte_match_statement: byte_match_statement,
            geo_match_statement: geo_match_statement,
            ip_set_reference_statement: ip_set_reference_statement,
            label_match_statement: label_match_statement,
            not_statement: not_statement,
            or_statement: or_statement,
            regex_match_statement: regex_match_statement,
            regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
            size_constraint_statement: size_constraint_statement,
            sqli_match_statement: sqli_match_statement,
            xss_match_statement: xss_match_statement,
          }),
          not_statement:: {
            new(
              statement=null
            ):: std.prune(a={
              statement: statement,
            }),
            statement:: {
              and_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              byte_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  positional_constraint,
                  search_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  positional_constraint: positional_constraint,
                  search_string: search_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              geo_match_statement:: {
                forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                  }),
                },
                new(
                  country_codes,
                  forwarded_ip_config=null
                ):: std.prune(a={
                  country_codes: country_codes,
                  forwarded_ip_config: forwarded_ip_config,
                }),
              },
              ip_set_reference_statement:: {
                ip_set_forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name,
                    position
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                    position: position,
                  }),
                },
                new(
                  arn,
                  ip_set_forwarded_ip_config=null
                ):: std.prune(a={
                  arn: arn,
                  ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                }),
              },
              label_match_statement:: {
                new(
                  key,
                  scope
                ):: std.prune(a={
                  key: key,
                  scope: scope,
                }),
              },
              new(
                and_statement=null,
                byte_match_statement=null,
                geo_match_statement=null,
                ip_set_reference_statement=null,
                label_match_statement=null,
                not_statement=null,
                or_statement=null,
                regex_match_statement=null,
                regex_pattern_set_reference_statement=null,
                size_constraint_statement=null,
                sqli_match_statement=null,
                xss_match_statement=null
              ):: std.prune(a={
                and_statement: and_statement,
                byte_match_statement: byte_match_statement,
                geo_match_statement: geo_match_statement,
                ip_set_reference_statement: ip_set_reference_statement,
                label_match_statement: label_match_statement,
                not_statement: not_statement,
                or_statement: or_statement,
                regex_match_statement: regex_match_statement,
                regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                size_constraint_statement: size_constraint_statement,
                sqli_match_statement: sqli_match_statement,
                xss_match_statement: xss_match_statement,
              }),
              not_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              or_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              regex_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  regex_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  regex_string: regex_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              regex_pattern_set_reference_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  arn,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  arn: arn,
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              size_constraint_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  comparison_operator,
                  size,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  comparison_operator: comparison_operator,
                  field_to_match: field_to_match,
                  size: size,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              sqli_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              xss_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
            },
          },
          or_statement:: {
            new(
              statement=null
            ):: std.prune(a={
              statement: statement,
            }),
            statement:: {
              and_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              byte_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  positional_constraint,
                  search_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  positional_constraint: positional_constraint,
                  search_string: search_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              geo_match_statement:: {
                forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                  }),
                },
                new(
                  country_codes,
                  forwarded_ip_config=null
                ):: std.prune(a={
                  country_codes: country_codes,
                  forwarded_ip_config: forwarded_ip_config,
                }),
              },
              ip_set_reference_statement:: {
                ip_set_forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name,
                    position
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                    position: position,
                  }),
                },
                new(
                  arn,
                  ip_set_forwarded_ip_config=null
                ):: std.prune(a={
                  arn: arn,
                  ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                }),
              },
              label_match_statement:: {
                new(
                  key,
                  scope
                ):: std.prune(a={
                  key: key,
                  scope: scope,
                }),
              },
              new(
                and_statement=null,
                byte_match_statement=null,
                geo_match_statement=null,
                ip_set_reference_statement=null,
                label_match_statement=null,
                not_statement=null,
                or_statement=null,
                regex_match_statement=null,
                regex_pattern_set_reference_statement=null,
                size_constraint_statement=null,
                sqli_match_statement=null,
                xss_match_statement=null
              ):: std.prune(a={
                and_statement: and_statement,
                byte_match_statement: byte_match_statement,
                geo_match_statement: geo_match_statement,
                ip_set_reference_statement: ip_set_reference_statement,
                label_match_statement: label_match_statement,
                not_statement: not_statement,
                or_statement: or_statement,
                regex_match_statement: regex_match_statement,
                regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                size_constraint_statement: size_constraint_statement,
                sqli_match_statement: sqli_match_statement,
                xss_match_statement: xss_match_statement,
              }),
              not_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              or_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              regex_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  regex_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  regex_string: regex_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              regex_pattern_set_reference_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  arn,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  arn: arn,
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              size_constraint_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  comparison_operator,
                  size,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  comparison_operator: comparison_operator,
                  field_to_match: field_to_match,
                  size: size,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              sqli_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              xss_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
            },
          },
          regex_match_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              regex_string,
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              field_to_match: field_to_match,
              regex_string: regex_string,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          regex_pattern_set_reference_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              arn,
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              arn: arn,
              field_to_match: field_to_match,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          size_constraint_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              comparison_operator,
              size,
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              comparison_operator: comparison_operator,
              field_to_match: field_to_match,
              size: size,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          sqli_match_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              field_to_match: field_to_match,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          xss_match_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              field_to_match: field_to_match,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
        },
      },
      rate_based_statement:: {
        forwarded_ip_config:: {
          new(
            fallback_behavior,
            header_name
          ):: std.prune(a={
            fallback_behavior: fallback_behavior,
            header_name: header_name,
          }),
        },
        new(
          limit,
          aggregate_key_type=null,
          forwarded_ip_config=null,
          scope_down_statement=null
        ):: std.prune(a={
          aggregate_key_type: aggregate_key_type,
          forwarded_ip_config: forwarded_ip_config,
          limit: limit,
          scope_down_statement: scope_down_statement,
        }),
        scope_down_statement:: {
          and_statement:: {
            new(
              statement=null
            ):: std.prune(a={
              statement: statement,
            }),
            statement:: {
              and_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              byte_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  positional_constraint,
                  search_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  positional_constraint: positional_constraint,
                  search_string: search_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              geo_match_statement:: {
                forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                  }),
                },
                new(
                  country_codes,
                  forwarded_ip_config=null
                ):: std.prune(a={
                  country_codes: country_codes,
                  forwarded_ip_config: forwarded_ip_config,
                }),
              },
              ip_set_reference_statement:: {
                ip_set_forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name,
                    position
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                    position: position,
                  }),
                },
                new(
                  arn,
                  ip_set_forwarded_ip_config=null
                ):: std.prune(a={
                  arn: arn,
                  ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                }),
              },
              label_match_statement:: {
                new(
                  key,
                  scope
                ):: std.prune(a={
                  key: key,
                  scope: scope,
                }),
              },
              new(
                and_statement=null,
                byte_match_statement=null,
                geo_match_statement=null,
                ip_set_reference_statement=null,
                label_match_statement=null,
                not_statement=null,
                or_statement=null,
                regex_match_statement=null,
                regex_pattern_set_reference_statement=null,
                size_constraint_statement=null,
                sqli_match_statement=null,
                xss_match_statement=null
              ):: std.prune(a={
                and_statement: and_statement,
                byte_match_statement: byte_match_statement,
                geo_match_statement: geo_match_statement,
                ip_set_reference_statement: ip_set_reference_statement,
                label_match_statement: label_match_statement,
                not_statement: not_statement,
                or_statement: or_statement,
                regex_match_statement: regex_match_statement,
                regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                size_constraint_statement: size_constraint_statement,
                sqli_match_statement: sqli_match_statement,
                xss_match_statement: xss_match_statement,
              }),
              not_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              or_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              regex_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  regex_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  regex_string: regex_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              regex_pattern_set_reference_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  arn,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  arn: arn,
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              size_constraint_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  comparison_operator,
                  size,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  comparison_operator: comparison_operator,
                  field_to_match: field_to_match,
                  size: size,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              sqli_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              xss_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
            },
          },
          byte_match_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              positional_constraint,
              search_string,
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              field_to_match: field_to_match,
              positional_constraint: positional_constraint,
              search_string: search_string,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          geo_match_statement:: {
            forwarded_ip_config:: {
              new(
                fallback_behavior,
                header_name
              ):: std.prune(a={
                fallback_behavior: fallback_behavior,
                header_name: header_name,
              }),
            },
            new(
              country_codes,
              forwarded_ip_config=null
            ):: std.prune(a={
              country_codes: country_codes,
              forwarded_ip_config: forwarded_ip_config,
            }),
          },
          ip_set_reference_statement:: {
            ip_set_forwarded_ip_config:: {
              new(
                fallback_behavior,
                header_name,
                position
              ):: std.prune(a={
                fallback_behavior: fallback_behavior,
                header_name: header_name,
                position: position,
              }),
            },
            new(
              arn,
              ip_set_forwarded_ip_config=null
            ):: std.prune(a={
              arn: arn,
              ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
            }),
          },
          label_match_statement:: {
            new(
              key,
              scope
            ):: std.prune(a={
              key: key,
              scope: scope,
            }),
          },
          new(
            and_statement=null,
            byte_match_statement=null,
            geo_match_statement=null,
            ip_set_reference_statement=null,
            label_match_statement=null,
            not_statement=null,
            or_statement=null,
            regex_match_statement=null,
            regex_pattern_set_reference_statement=null,
            size_constraint_statement=null,
            sqli_match_statement=null,
            xss_match_statement=null
          ):: std.prune(a={
            and_statement: and_statement,
            byte_match_statement: byte_match_statement,
            geo_match_statement: geo_match_statement,
            ip_set_reference_statement: ip_set_reference_statement,
            label_match_statement: label_match_statement,
            not_statement: not_statement,
            or_statement: or_statement,
            regex_match_statement: regex_match_statement,
            regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
            size_constraint_statement: size_constraint_statement,
            sqli_match_statement: sqli_match_statement,
            xss_match_statement: xss_match_statement,
          }),
          not_statement:: {
            new(
              statement=null
            ):: std.prune(a={
              statement: statement,
            }),
            statement:: {
              and_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              byte_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  positional_constraint,
                  search_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  positional_constraint: positional_constraint,
                  search_string: search_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              geo_match_statement:: {
                forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                  }),
                },
                new(
                  country_codes,
                  forwarded_ip_config=null
                ):: std.prune(a={
                  country_codes: country_codes,
                  forwarded_ip_config: forwarded_ip_config,
                }),
              },
              ip_set_reference_statement:: {
                ip_set_forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name,
                    position
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                    position: position,
                  }),
                },
                new(
                  arn,
                  ip_set_forwarded_ip_config=null
                ):: std.prune(a={
                  arn: arn,
                  ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                }),
              },
              label_match_statement:: {
                new(
                  key,
                  scope
                ):: std.prune(a={
                  key: key,
                  scope: scope,
                }),
              },
              new(
                and_statement=null,
                byte_match_statement=null,
                geo_match_statement=null,
                ip_set_reference_statement=null,
                label_match_statement=null,
                not_statement=null,
                or_statement=null,
                regex_match_statement=null,
                regex_pattern_set_reference_statement=null,
                size_constraint_statement=null,
                sqli_match_statement=null,
                xss_match_statement=null
              ):: std.prune(a={
                and_statement: and_statement,
                byte_match_statement: byte_match_statement,
                geo_match_statement: geo_match_statement,
                ip_set_reference_statement: ip_set_reference_statement,
                label_match_statement: label_match_statement,
                not_statement: not_statement,
                or_statement: or_statement,
                regex_match_statement: regex_match_statement,
                regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                size_constraint_statement: size_constraint_statement,
                sqli_match_statement: sqli_match_statement,
                xss_match_statement: xss_match_statement,
              }),
              not_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              or_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              regex_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  regex_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  regex_string: regex_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              regex_pattern_set_reference_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  arn,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  arn: arn,
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              size_constraint_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  comparison_operator,
                  size,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  comparison_operator: comparison_operator,
                  field_to_match: field_to_match,
                  size: size,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              sqli_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              xss_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
            },
          },
          or_statement:: {
            new(
              statement=null
            ):: std.prune(a={
              statement: statement,
            }),
            statement:: {
              and_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              byte_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  positional_constraint,
                  search_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  positional_constraint: positional_constraint,
                  search_string: search_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              geo_match_statement:: {
                forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                  }),
                },
                new(
                  country_codes,
                  forwarded_ip_config=null
                ):: std.prune(a={
                  country_codes: country_codes,
                  forwarded_ip_config: forwarded_ip_config,
                }),
              },
              ip_set_reference_statement:: {
                ip_set_forwarded_ip_config:: {
                  new(
                    fallback_behavior,
                    header_name,
                    position
                  ):: std.prune(a={
                    fallback_behavior: fallback_behavior,
                    header_name: header_name,
                    position: position,
                  }),
                },
                new(
                  arn,
                  ip_set_forwarded_ip_config=null
                ):: std.prune(a={
                  arn: arn,
                  ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                }),
              },
              label_match_statement:: {
                new(
                  key,
                  scope
                ):: std.prune(a={
                  key: key,
                  scope: scope,
                }),
              },
              new(
                and_statement=null,
                byte_match_statement=null,
                geo_match_statement=null,
                ip_set_reference_statement=null,
                label_match_statement=null,
                not_statement=null,
                or_statement=null,
                regex_match_statement=null,
                regex_pattern_set_reference_statement=null,
                size_constraint_statement=null,
                sqli_match_statement=null,
                xss_match_statement=null
              ):: std.prune(a={
                and_statement: and_statement,
                byte_match_statement: byte_match_statement,
                geo_match_statement: geo_match_statement,
                ip_set_reference_statement: ip_set_reference_statement,
                label_match_statement: label_match_statement,
                not_statement: not_statement,
                or_statement: or_statement,
                regex_match_statement: regex_match_statement,
                regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                size_constraint_statement: size_constraint_statement,
                sqli_match_statement: sqli_match_statement,
                xss_match_statement: xss_match_statement,
              }),
              not_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              or_statement:: {
                new(
                  statement=null
                ):: std.prune(a={
                  statement: statement,
                }),
                statement:: {
                  byte_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      positional_constraint,
                      search_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      positional_constraint: positional_constraint,
                      search_string: search_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  geo_match_statement:: {
                    forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                      }),
                    },
                    new(
                      country_codes,
                      forwarded_ip_config=null
                    ):: std.prune(a={
                      country_codes: country_codes,
                      forwarded_ip_config: forwarded_ip_config,
                    }),
                  },
                  ip_set_reference_statement:: {
                    ip_set_forwarded_ip_config:: {
                      new(
                        fallback_behavior,
                        header_name,
                        position
                      ):: std.prune(a={
                        fallback_behavior: fallback_behavior,
                        header_name: header_name,
                        position: position,
                      }),
                    },
                    new(
                      arn,
                      ip_set_forwarded_ip_config=null
                    ):: std.prune(a={
                      arn: arn,
                      ip_set_forwarded_ip_config: ip_set_forwarded_ip_config,
                    }),
                  },
                  label_match_statement:: {
                    new(
                      key,
                      scope
                    ):: std.prune(a={
                      key: key,
                      scope: scope,
                    }),
                  },
                  new(
                    byte_match_statement=null,
                    geo_match_statement=null,
                    ip_set_reference_statement=null,
                    label_match_statement=null,
                    regex_match_statement=null,
                    regex_pattern_set_reference_statement=null,
                    size_constraint_statement=null,
                    sqli_match_statement=null,
                    xss_match_statement=null
                  ):: std.prune(a={
                    byte_match_statement: byte_match_statement,
                    geo_match_statement: geo_match_statement,
                    ip_set_reference_statement: ip_set_reference_statement,
                    label_match_statement: label_match_statement,
                    regex_match_statement: regex_match_statement,
                    regex_pattern_set_reference_statement: regex_pattern_set_reference_statement,
                    size_constraint_statement: size_constraint_statement,
                    sqli_match_statement: sqli_match_statement,
                    xss_match_statement: xss_match_statement,
                  }),
                  regex_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      regex_string,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      regex_string: regex_string,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  regex_pattern_set_reference_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      arn,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      arn: arn,
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  size_constraint_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      comparison_operator,
                      size,
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      comparison_operator: comparison_operator,
                      field_to_match: field_to_match,
                      size: size,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  sqli_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                  xss_match_statement:: {
                    field_to_match:: {
                      all_query_arguments:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      body:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      cookies:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_cookies=null,
                            included_cookies=null
                          ):: std.prune(a={
                            all: all,
                            excluded_cookies: excluded_cookies,
                            included_cookies: included_cookies,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      headers:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            excluded_headers=null,
                            included_headers=null
                          ):: std.prune(a={
                            all: all,
                            excluded_headers: excluded_headers,
                            included_headers: included_headers,
                          }),
                        },
                        new(
                          match_scope,
                          oversize_handling,
                          match_pattern=null
                        ):: std.prune(a={
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      json_body:: {
                        match_pattern:: {
                          all:: {
                            new(

                            ):: std.prune(a={}),
                          },
                          new(
                            all=null,
                            included_paths=null
                          ):: std.prune(a={
                            all: all,
                            included_paths: included_paths,
                          }),
                        },
                        new(
                          match_scope,
                          invalid_fallback_behavior=null,
                          match_pattern=null,
                          oversize_handling=null
                        ):: std.prune(a={
                          invalid_fallback_behavior: invalid_fallback_behavior,
                          match_pattern: match_pattern,
                          match_scope: match_scope,
                          oversize_handling: oversize_handling,
                        }),
                      },
                      method:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all_query_arguments=null,
                        body=null,
                        cookies=null,
                        headers=null,
                        json_body=null,
                        method=null,
                        query_string=null,
                        single_header=null,
                        single_query_argument=null,
                        uri_path=null
                      ):: std.prune(a={
                        all_query_arguments: all_query_arguments,
                        body: body,
                        cookies: cookies,
                        headers: headers,
                        json_body: json_body,
                        method: method,
                        query_string: query_string,
                        single_header: single_header,
                        single_query_argument: single_query_argument,
                        uri_path: uri_path,
                      }),
                      query_string:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      single_header:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      single_query_argument:: {
                        new(
                          name
                        ):: std.prune(a={
                          name: name,
                        }),
                      },
                      uri_path:: {
                        new(

                        ):: std.prune(a={}),
                      },
                    },
                    new(
                      field_to_match=null,
                      text_transformation=null
                    ):: std.prune(a={
                      field_to_match: field_to_match,
                      text_transformation: text_transformation,
                    }),
                    text_transformation:: {
                      new(
                        priority,
                        type
                      ):: std.prune(a={
                        priority: priority,
                        type: type,
                      }),
                    },
                  },
                },
              },
              regex_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  regex_string,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  regex_string: regex_string,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              regex_pattern_set_reference_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  arn,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  arn: arn,
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              size_constraint_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  comparison_operator,
                  size,
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  comparison_operator: comparison_operator,
                  field_to_match: field_to_match,
                  size: size,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              sqli_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
              xss_match_statement:: {
                field_to_match:: {
                  all_query_arguments:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  body:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  cookies:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_cookies=null,
                        included_cookies=null
                      ):: std.prune(a={
                        all: all,
                        excluded_cookies: excluded_cookies,
                        included_cookies: included_cookies,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  headers:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        excluded_headers=null,
                        included_headers=null
                      ):: std.prune(a={
                        all: all,
                        excluded_headers: excluded_headers,
                        included_headers: included_headers,
                      }),
                    },
                    new(
                      match_scope,
                      oversize_handling,
                      match_pattern=null
                    ):: std.prune(a={
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  json_body:: {
                    match_pattern:: {
                      all:: {
                        new(

                        ):: std.prune(a={}),
                      },
                      new(
                        all=null,
                        included_paths=null
                      ):: std.prune(a={
                        all: all,
                        included_paths: included_paths,
                      }),
                    },
                    new(
                      match_scope,
                      invalid_fallback_behavior=null,
                      match_pattern=null,
                      oversize_handling=null
                    ):: std.prune(a={
                      invalid_fallback_behavior: invalid_fallback_behavior,
                      match_pattern: match_pattern,
                      match_scope: match_scope,
                      oversize_handling: oversize_handling,
                    }),
                  },
                  method:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all_query_arguments=null,
                    body=null,
                    cookies=null,
                    headers=null,
                    json_body=null,
                    method=null,
                    query_string=null,
                    single_header=null,
                    single_query_argument=null,
                    uri_path=null
                  ):: std.prune(a={
                    all_query_arguments: all_query_arguments,
                    body: body,
                    cookies: cookies,
                    headers: headers,
                    json_body: json_body,
                    method: method,
                    query_string: query_string,
                    single_header: single_header,
                    single_query_argument: single_query_argument,
                    uri_path: uri_path,
                  }),
                  query_string:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  single_header:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  single_query_argument:: {
                    new(
                      name
                    ):: std.prune(a={
                      name: name,
                    }),
                  },
                  uri_path:: {
                    new(

                    ):: std.prune(a={}),
                  },
                },
                new(
                  field_to_match=null,
                  text_transformation=null
                ):: std.prune(a={
                  field_to_match: field_to_match,
                  text_transformation: text_transformation,
                }),
                text_transformation:: {
                  new(
                    priority,
                    type
                  ):: std.prune(a={
                    priority: priority,
                    type: type,
                  }),
                },
              },
            },
          },
          regex_match_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              regex_string,
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              field_to_match: field_to_match,
              regex_string: regex_string,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          regex_pattern_set_reference_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              arn,
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              arn: arn,
              field_to_match: field_to_match,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          size_constraint_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              comparison_operator,
              size,
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              comparison_operator: comparison_operator,
              field_to_match: field_to_match,
              size: size,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          sqli_match_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              field_to_match: field_to_match,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
          xss_match_statement:: {
            field_to_match:: {
              all_query_arguments:: {
                new(

                ):: std.prune(a={}),
              },
              body:: {
                new(

                ):: std.prune(a={}),
              },
              cookies:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_cookies=null,
                    included_cookies=null
                  ):: std.prune(a={
                    all: all,
                    excluded_cookies: excluded_cookies,
                    included_cookies: included_cookies,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              headers:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    excluded_headers=null,
                    included_headers=null
                  ):: std.prune(a={
                    all: all,
                    excluded_headers: excluded_headers,
                    included_headers: included_headers,
                  }),
                },
                new(
                  match_scope,
                  oversize_handling,
                  match_pattern=null
                ):: std.prune(a={
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              json_body:: {
                match_pattern:: {
                  all:: {
                    new(

                    ):: std.prune(a={}),
                  },
                  new(
                    all=null,
                    included_paths=null
                  ):: std.prune(a={
                    all: all,
                    included_paths: included_paths,
                  }),
                },
                new(
                  match_scope,
                  invalid_fallback_behavior=null,
                  match_pattern=null,
                  oversize_handling=null
                ):: std.prune(a={
                  invalid_fallback_behavior: invalid_fallback_behavior,
                  match_pattern: match_pattern,
                  match_scope: match_scope,
                  oversize_handling: oversize_handling,
                }),
              },
              method:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all_query_arguments=null,
                body=null,
                cookies=null,
                headers=null,
                json_body=null,
                method=null,
                query_string=null,
                single_header=null,
                single_query_argument=null,
                uri_path=null
              ):: std.prune(a={
                all_query_arguments: all_query_arguments,
                body: body,
                cookies: cookies,
                headers: headers,
                json_body: json_body,
                method: method,
                query_string: query_string,
                single_header: single_header,
                single_query_argument: single_query_argument,
                uri_path: uri_path,
              }),
              query_string:: {
                new(

                ):: std.prune(a={}),
              },
              single_header:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              single_query_argument:: {
                new(
                  name
                ):: std.prune(a={
                  name: name,
                }),
              },
              uri_path:: {
                new(

                ):: std.prune(a={}),
              },
            },
            new(
              field_to_match=null,
              text_transformation=null
            ):: std.prune(a={
              field_to_match: field_to_match,
              text_transformation: text_transformation,
            }),
            text_transformation:: {
              new(
                priority,
                type
              ):: std.prune(a={
                priority: priority,
                type: type,
              }),
            },
          },
        },
      },
      regex_match_statement:: {
        field_to_match:: {
          all_query_arguments:: {
            new(

            ):: std.prune(a={}),
          },
          body:: {
            new(

            ):: std.prune(a={}),
          },
          cookies:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                excluded_cookies=null,
                included_cookies=null
              ):: std.prune(a={
                all: all,
                excluded_cookies: excluded_cookies,
                included_cookies: included_cookies,
              }),
            },
            new(
              match_scope,
              oversize_handling,
              match_pattern=null
            ):: std.prune(a={
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          headers:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                excluded_headers=null,
                included_headers=null
              ):: std.prune(a={
                all: all,
                excluded_headers: excluded_headers,
                included_headers: included_headers,
              }),
            },
            new(
              match_scope,
              oversize_handling,
              match_pattern=null
            ):: std.prune(a={
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          json_body:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                included_paths=null
              ):: std.prune(a={
                all: all,
                included_paths: included_paths,
              }),
            },
            new(
              match_scope,
              invalid_fallback_behavior=null,
              match_pattern=null,
              oversize_handling=null
            ):: std.prune(a={
              invalid_fallback_behavior: invalid_fallback_behavior,
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          method:: {
            new(

            ):: std.prune(a={}),
          },
          new(
            all_query_arguments=null,
            body=null,
            cookies=null,
            headers=null,
            json_body=null,
            method=null,
            query_string=null,
            single_header=null,
            single_query_argument=null,
            uri_path=null
          ):: std.prune(a={
            all_query_arguments: all_query_arguments,
            body: body,
            cookies: cookies,
            headers: headers,
            json_body: json_body,
            method: method,
            query_string: query_string,
            single_header: single_header,
            single_query_argument: single_query_argument,
            uri_path: uri_path,
          }),
          query_string:: {
            new(

            ):: std.prune(a={}),
          },
          single_header:: {
            new(
              name
            ):: std.prune(a={
              name: name,
            }),
          },
          single_query_argument:: {
            new(
              name
            ):: std.prune(a={
              name: name,
            }),
          },
          uri_path:: {
            new(

            ):: std.prune(a={}),
          },
        },
        new(
          regex_string,
          field_to_match=null,
          text_transformation=null
        ):: std.prune(a={
          field_to_match: field_to_match,
          regex_string: regex_string,
          text_transformation: text_transformation,
        }),
        text_transformation:: {
          new(
            priority,
            type
          ):: std.prune(a={
            priority: priority,
            type: type,
          }),
        },
      },
      regex_pattern_set_reference_statement:: {
        field_to_match:: {
          all_query_arguments:: {
            new(

            ):: std.prune(a={}),
          },
          body:: {
            new(

            ):: std.prune(a={}),
          },
          cookies:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                excluded_cookies=null,
                included_cookies=null
              ):: std.prune(a={
                all: all,
                excluded_cookies: excluded_cookies,
                included_cookies: included_cookies,
              }),
            },
            new(
              match_scope,
              oversize_handling,
              match_pattern=null
            ):: std.prune(a={
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          headers:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                excluded_headers=null,
                included_headers=null
              ):: std.prune(a={
                all: all,
                excluded_headers: excluded_headers,
                included_headers: included_headers,
              }),
            },
            new(
              match_scope,
              oversize_handling,
              match_pattern=null
            ):: std.prune(a={
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          json_body:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                included_paths=null
              ):: std.prune(a={
                all: all,
                included_paths: included_paths,
              }),
            },
            new(
              match_scope,
              invalid_fallback_behavior=null,
              match_pattern=null,
              oversize_handling=null
            ):: std.prune(a={
              invalid_fallback_behavior: invalid_fallback_behavior,
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          method:: {
            new(

            ):: std.prune(a={}),
          },
          new(
            all_query_arguments=null,
            body=null,
            cookies=null,
            headers=null,
            json_body=null,
            method=null,
            query_string=null,
            single_header=null,
            single_query_argument=null,
            uri_path=null
          ):: std.prune(a={
            all_query_arguments: all_query_arguments,
            body: body,
            cookies: cookies,
            headers: headers,
            json_body: json_body,
            method: method,
            query_string: query_string,
            single_header: single_header,
            single_query_argument: single_query_argument,
            uri_path: uri_path,
          }),
          query_string:: {
            new(

            ):: std.prune(a={}),
          },
          single_header:: {
            new(
              name
            ):: std.prune(a={
              name: name,
            }),
          },
          single_query_argument:: {
            new(
              name
            ):: std.prune(a={
              name: name,
            }),
          },
          uri_path:: {
            new(

            ):: std.prune(a={}),
          },
        },
        new(
          arn,
          field_to_match=null,
          text_transformation=null
        ):: std.prune(a={
          arn: arn,
          field_to_match: field_to_match,
          text_transformation: text_transformation,
        }),
        text_transformation:: {
          new(
            priority,
            type
          ):: std.prune(a={
            priority: priority,
            type: type,
          }),
        },
      },
      size_constraint_statement:: {
        field_to_match:: {
          all_query_arguments:: {
            new(

            ):: std.prune(a={}),
          },
          body:: {
            new(

            ):: std.prune(a={}),
          },
          cookies:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                excluded_cookies=null,
                included_cookies=null
              ):: std.prune(a={
                all: all,
                excluded_cookies: excluded_cookies,
                included_cookies: included_cookies,
              }),
            },
            new(
              match_scope,
              oversize_handling,
              match_pattern=null
            ):: std.prune(a={
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          headers:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                excluded_headers=null,
                included_headers=null
              ):: std.prune(a={
                all: all,
                excluded_headers: excluded_headers,
                included_headers: included_headers,
              }),
            },
            new(
              match_scope,
              oversize_handling,
              match_pattern=null
            ):: std.prune(a={
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          json_body:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                included_paths=null
              ):: std.prune(a={
                all: all,
                included_paths: included_paths,
              }),
            },
            new(
              match_scope,
              invalid_fallback_behavior=null,
              match_pattern=null,
              oversize_handling=null
            ):: std.prune(a={
              invalid_fallback_behavior: invalid_fallback_behavior,
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          method:: {
            new(

            ):: std.prune(a={}),
          },
          new(
            all_query_arguments=null,
            body=null,
            cookies=null,
            headers=null,
            json_body=null,
            method=null,
            query_string=null,
            single_header=null,
            single_query_argument=null,
            uri_path=null
          ):: std.prune(a={
            all_query_arguments: all_query_arguments,
            body: body,
            cookies: cookies,
            headers: headers,
            json_body: json_body,
            method: method,
            query_string: query_string,
            single_header: single_header,
            single_query_argument: single_query_argument,
            uri_path: uri_path,
          }),
          query_string:: {
            new(

            ):: std.prune(a={}),
          },
          single_header:: {
            new(
              name
            ):: std.prune(a={
              name: name,
            }),
          },
          single_query_argument:: {
            new(
              name
            ):: std.prune(a={
              name: name,
            }),
          },
          uri_path:: {
            new(

            ):: std.prune(a={}),
          },
        },
        new(
          comparison_operator,
          size,
          field_to_match=null,
          text_transformation=null
        ):: std.prune(a={
          comparison_operator: comparison_operator,
          field_to_match: field_to_match,
          size: size,
          text_transformation: text_transformation,
        }),
        text_transformation:: {
          new(
            priority,
            type
          ):: std.prune(a={
            priority: priority,
            type: type,
          }),
        },
      },
      sqli_match_statement:: {
        field_to_match:: {
          all_query_arguments:: {
            new(

            ):: std.prune(a={}),
          },
          body:: {
            new(

            ):: std.prune(a={}),
          },
          cookies:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                excluded_cookies=null,
                included_cookies=null
              ):: std.prune(a={
                all: all,
                excluded_cookies: excluded_cookies,
                included_cookies: included_cookies,
              }),
            },
            new(
              match_scope,
              oversize_handling,
              match_pattern=null
            ):: std.prune(a={
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          headers:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                excluded_headers=null,
                included_headers=null
              ):: std.prune(a={
                all: all,
                excluded_headers: excluded_headers,
                included_headers: included_headers,
              }),
            },
            new(
              match_scope,
              oversize_handling,
              match_pattern=null
            ):: std.prune(a={
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          json_body:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                included_paths=null
              ):: std.prune(a={
                all: all,
                included_paths: included_paths,
              }),
            },
            new(
              match_scope,
              invalid_fallback_behavior=null,
              match_pattern=null,
              oversize_handling=null
            ):: std.prune(a={
              invalid_fallback_behavior: invalid_fallback_behavior,
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          method:: {
            new(

            ):: std.prune(a={}),
          },
          new(
            all_query_arguments=null,
            body=null,
            cookies=null,
            headers=null,
            json_body=null,
            method=null,
            query_string=null,
            single_header=null,
            single_query_argument=null,
            uri_path=null
          ):: std.prune(a={
            all_query_arguments: all_query_arguments,
            body: body,
            cookies: cookies,
            headers: headers,
            json_body: json_body,
            method: method,
            query_string: query_string,
            single_header: single_header,
            single_query_argument: single_query_argument,
            uri_path: uri_path,
          }),
          query_string:: {
            new(

            ):: std.prune(a={}),
          },
          single_header:: {
            new(
              name
            ):: std.prune(a={
              name: name,
            }),
          },
          single_query_argument:: {
            new(
              name
            ):: std.prune(a={
              name: name,
            }),
          },
          uri_path:: {
            new(

            ):: std.prune(a={}),
          },
        },
        new(
          field_to_match=null,
          text_transformation=null
        ):: std.prune(a={
          field_to_match: field_to_match,
          text_transformation: text_transformation,
        }),
        text_transformation:: {
          new(
            priority,
            type
          ):: std.prune(a={
            priority: priority,
            type: type,
          }),
        },
      },
      xss_match_statement:: {
        field_to_match:: {
          all_query_arguments:: {
            new(

            ):: std.prune(a={}),
          },
          body:: {
            new(

            ):: std.prune(a={}),
          },
          cookies:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                excluded_cookies=null,
                included_cookies=null
              ):: std.prune(a={
                all: all,
                excluded_cookies: excluded_cookies,
                included_cookies: included_cookies,
              }),
            },
            new(
              match_scope,
              oversize_handling,
              match_pattern=null
            ):: std.prune(a={
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          headers:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                excluded_headers=null,
                included_headers=null
              ):: std.prune(a={
                all: all,
                excluded_headers: excluded_headers,
                included_headers: included_headers,
              }),
            },
            new(
              match_scope,
              oversize_handling,
              match_pattern=null
            ):: std.prune(a={
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          json_body:: {
            match_pattern:: {
              all:: {
                new(

                ):: std.prune(a={}),
              },
              new(
                all=null,
                included_paths=null
              ):: std.prune(a={
                all: all,
                included_paths: included_paths,
              }),
            },
            new(
              match_scope,
              invalid_fallback_behavior=null,
              match_pattern=null,
              oversize_handling=null
            ):: std.prune(a={
              invalid_fallback_behavior: invalid_fallback_behavior,
              match_pattern: match_pattern,
              match_scope: match_scope,
              oversize_handling: oversize_handling,
            }),
          },
          method:: {
            new(

            ):: std.prune(a={}),
          },
          new(
            all_query_arguments=null,
            body=null,
            cookies=null,
            headers=null,
            json_body=null,
            method=null,
            query_string=null,
            single_header=null,
            single_query_argument=null,
            uri_path=null
          ):: std.prune(a={
            all_query_arguments: all_query_arguments,
            body: body,
            cookies: cookies,
            headers: headers,
            json_body: json_body,
            method: method,
            query_string: query_string,
            single_header: single_header,
            single_query_argument: single_query_argument,
            uri_path: uri_path,
          }),
          query_string:: {
            new(

            ):: std.prune(a={}),
          },
          single_header:: {
            new(
              name
            ):: std.prune(a={
              name: name,
            }),
          },
          single_query_argument:: {
            new(
              name
            ):: std.prune(a={
              name: name,
            }),
          },
          uri_path:: {
            new(

            ):: std.prune(a={}),
          },
        },
        new(
          field_to_match=null,
          text_transformation=null
        ):: std.prune(a={
          field_to_match: field_to_match,
          text_transformation: text_transformation,
        }),
        text_transformation:: {
          new(
            priority,
            type
          ):: std.prune(a={
            priority: priority,
            type: type,
          }),
        },
      },
    },
    visibility_config:: {
      new(
        cloudwatch_metrics_enabled,
        metric_name,
        sampled_requests_enabled
      ):: std.prune(a={
        cloudwatch_metrics_enabled: cloudwatch_metrics_enabled,
        metric_name: metric_name,
        sampled_requests_enabled: sampled_requests_enabled,
      }),
    },
  },
  visibility_config:: {
    new(
      cloudwatch_metrics_enabled,
      metric_name,
      sampled_requests_enabled
    ):: std.prune(a={
      cloudwatch_metrics_enabled: cloudwatch_metrics_enabled,
      metric_name: metric_name,
      sampled_requests_enabled: sampled_requests_enabled,
    }),
  },
  withCapacity(resourceLabel, value):: {
    resource+: {
      aws_wafv2_rule_group+: {
        [resourceLabel]+: {
          capacity: value,
        },
      },
    },
  },
  withCustomResponseBody(resourceLabel, value):: {
    resource+: {
      aws_wafv2_rule_group+: {
        [resourceLabel]+: {
          custom_response_body: value,
        },
      },
    },
  },
  withCustomResponseBodyMixin(resourceLabel, value):: {
    resource+: {
      aws_wafv2_rule_group+: {
        [resourceLabel]+: {
          custom_response_body+: if std.isArray(v=value) then value else [value],
        },
      },
    },
  },
  withDescription(resourceLabel, value):: {
    resource+: {
      aws_wafv2_rule_group+: {
        [resourceLabel]+: {
          description: value,
        },
      },
    },
  },
  withName(resourceLabel, value):: {
    resource+: {
      aws_wafv2_rule_group+: {
        [resourceLabel]+: {
          name: value,
        },
      },
    },
  },
  withRule(resourceLabel, value):: {
    resource+: {
      aws_wafv2_rule_group+: {
        [resourceLabel]+: {
          rule: value,
        },
      },
    },
  },
  withRuleMixin(resourceLabel, value):: {
    resource+: {
      aws_wafv2_rule_group+: {
        [resourceLabel]+: {
          rule+: if std.isArray(v=value) then value else [value],
        },
      },
    },
  },
  withScope(resourceLabel, value):: {
    resource+: {
      aws_wafv2_rule_group+: {
        [resourceLabel]+: {
          scope: value,
        },
      },
    },
  },
  withTags(resourceLabel, value):: {
    resource+: {
      aws_wafv2_rule_group+: {
        [resourceLabel]+: {
          tags: value,
        },
      },
    },
  },
  withTagsAll(resourceLabel, value):: {
    resource+: {
      aws_wafv2_rule_group+: {
        [resourceLabel]+: {
          tags_all: value,
        },
      },
    },
  },
  withVisibilityConfig(resourceLabel, value):: {
    resource+: {
      aws_wafv2_rule_group+: {
        [resourceLabel]+: {
          visibility_config: value,
        },
      },
    },
  },
  withVisibilityConfigMixin(resourceLabel, value):: {
    resource+: {
      aws_wafv2_rule_group+: {
        [resourceLabel]+: {
          visibility_config+: if std.isArray(v=value) then value else [value],
        },
      },
    },
  },
}
